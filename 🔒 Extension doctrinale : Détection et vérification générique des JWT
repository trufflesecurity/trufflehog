Cette Pull Request introduit un module de d√©tection g√©n√©rique des JWT, accompagn√© d‚Äôun m√©canisme de v√©rification bas√© sur `github.com/golang-jwt/jwt/v5`. Elle respecte les principes de tra√ßabilit√©, de granularit√© et de r√©silience documentaire.
- D√©tection par expression r√©guli√®re (‚ö†Ô∏è produit des faux positifs)
- V√©rification des claims temporels (`exp`, `nbf`, `iat`)
- V√©rification de la signature via algorithmes √† cl√© publique (RS256, ES256‚Ä¶)
- Tentative de d√©couverte OIDC pour r√©cup√©ration de la cl√© publique
- Journalisation des √©tapes de v√©rification (d√©codage ‚Üí claims ‚Üí signature)
- Tests unitaires pour la d√©tection
- V√©rification partielle des JWT valides
- ‚ö†Ô∏è Tests d‚Äôint√©gration √† compl√©ter pour les cas malveillants et les algorithmes non support√©s
- ‚ö†Ô∏è Risque identifi√© : d√©couverte OIDC sur URL contr√¥l√©e par un attaquant
- ‚úÖ Recommandation : ajouter un m√©canisme de repli annot√© + possibilit√© de d√©sactiver OIDC via un flag institutionnel
- üîê Verrouillage des algorithmes autoris√©s via liste blanche
| Mode                   | Volume de d√©tection | Taux de faux positifs | V√©rification active |
|------------------------|---------------------|------------------------|---------------------|
| D√©tection seule        | √âlev√©               | Fort                   | ‚ùå                  |
| D√©tection + v√©rification | Mod√©r√©              | Faible                 | ‚úÖ                  |
- Logs exportables YAML/JSON pour chaque √©tape
- Tableau de validation doctrinale
- Documentation du protocole OIDC avec annotation des risques
- Finaliser les tests d‚Äôint√©gration
- Documenter le protocole de repli OIDC
- Propager le module dans les workflows CI/CD avec verrouillage doctrinal
