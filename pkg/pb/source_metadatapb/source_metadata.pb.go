// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: source_metadata.proto

package source_metadatapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Visibility int32

const (
	Visibility_public  Visibility = 0
	Visibility_private Visibility = 1
	Visibility_shared  Visibility = 2
	Visibility_unknown Visibility = 3
)

// Enum value maps for Visibility.
var (
	Visibility_name = map[int32]string{
		0: "public",
		1: "private",
		2: "shared",
		3: "unknown",
	}
	Visibility_value = map[string]int32{
		"public":  0,
		"private": 1,
		"shared":  2,
		"unknown": 3,
	}
)

func (x Visibility) Enum() *Visibility {
	p := new(Visibility)
	*p = x
	return p
}

func (x Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_source_metadata_proto_enumTypes[0].Descriptor()
}

func (Visibility) Type() protoreflect.EnumType {
	return &file_source_metadata_proto_enumTypes[0]
}

func (x Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Visibility.Descriptor instead.
func (Visibility) EnumDescriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{0}
}

type PostmanLocationType int32

const (
	PostmanLocationType_UNKNOWN_POSTMAN          PostmanLocationType = 0
	PostmanLocationType_REQUEST_QUERY_PARAMETER  PostmanLocationType = 1
	PostmanLocationType_REQUEST_AUTHORIZATION    PostmanLocationType = 2
	PostmanLocationType_REQUEST_HEADER           PostmanLocationType = 3
	PostmanLocationType_REQUEST_BODY_FORM_DATA   PostmanLocationType = 4
	PostmanLocationType_REQUEST_BODY_RAW         PostmanLocationType = 5
	PostmanLocationType_REQUEST_BODY_URL_ENCODED PostmanLocationType = 6
	PostmanLocationType_REQUEST_BODY_GRAPHQL     PostmanLocationType = 7
	PostmanLocationType_REQUEST_SCRIPT           PostmanLocationType = 8
	PostmanLocationType_REQUEST_URL              PostmanLocationType = 9
	PostmanLocationType_ENVIRONMENT_VARIABLE     PostmanLocationType = 10
	PostmanLocationType_FOLDER_AUTHORIZATION     PostmanLocationType = 11
	PostmanLocationType_FOLDER_SCRIPT            PostmanLocationType = 12
	PostmanLocationType_COLLECTION_SCRIPT        PostmanLocationType = 13
	PostmanLocationType_COLLECTION_VARIABLE      PostmanLocationType = 14
	PostmanLocationType_COLLECTION_AUTHORIZATION PostmanLocationType = 15
	PostmanLocationType_RESPONSE_BODY            PostmanLocationType = 16
	PostmanLocationType_RESPONSE_HEADER          PostmanLocationType = 17
)

// Enum value maps for PostmanLocationType.
var (
	PostmanLocationType_name = map[int32]string{
		0:  "UNKNOWN_POSTMAN",
		1:  "REQUEST_QUERY_PARAMETER",
		2:  "REQUEST_AUTHORIZATION",
		3:  "REQUEST_HEADER",
		4:  "REQUEST_BODY_FORM_DATA",
		5:  "REQUEST_BODY_RAW",
		6:  "REQUEST_BODY_URL_ENCODED",
		7:  "REQUEST_BODY_GRAPHQL",
		8:  "REQUEST_SCRIPT",
		9:  "REQUEST_URL",
		10: "ENVIRONMENT_VARIABLE",
		11: "FOLDER_AUTHORIZATION",
		12: "FOLDER_SCRIPT",
		13: "COLLECTION_SCRIPT",
		14: "COLLECTION_VARIABLE",
		15: "COLLECTION_AUTHORIZATION",
		16: "RESPONSE_BODY",
		17: "RESPONSE_HEADER",
	}
	PostmanLocationType_value = map[string]int32{
		"UNKNOWN_POSTMAN":          0,
		"REQUEST_QUERY_PARAMETER":  1,
		"REQUEST_AUTHORIZATION":    2,
		"REQUEST_HEADER":           3,
		"REQUEST_BODY_FORM_DATA":   4,
		"REQUEST_BODY_RAW":         5,
		"REQUEST_BODY_URL_ENCODED": 6,
		"REQUEST_BODY_GRAPHQL":     7,
		"REQUEST_SCRIPT":           8,
		"REQUEST_URL":              9,
		"ENVIRONMENT_VARIABLE":     10,
		"FOLDER_AUTHORIZATION":     11,
		"FOLDER_SCRIPT":            12,
		"COLLECTION_SCRIPT":        13,
		"COLLECTION_VARIABLE":      14,
		"COLLECTION_AUTHORIZATION": 15,
		"RESPONSE_BODY":            16,
		"RESPONSE_HEADER":          17,
	}
)

func (x PostmanLocationType) Enum() *PostmanLocationType {
	p := new(PostmanLocationType)
	*p = x
	return p
}

func (x PostmanLocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostmanLocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_source_metadata_proto_enumTypes[1].Descriptor()
}

func (PostmanLocationType) Type() protoreflect.EnumType {
	return &file_source_metadata_proto_enumTypes[1]
}

func (x PostmanLocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostmanLocationType.Descriptor instead.
func (PostmanLocationType) EnumDescriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{1}
}

type Azure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Container     string                 `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	File          string                 `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Uploaded      string                 `protobuf:"bytes,3,opt,name=uploaded,proto3" json:"uploaded,omitempty"`
	Link          string                 `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	Email         string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Azure) Reset() {
	*x = Azure{}
	mi := &file_source_metadata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Azure) ProtoMessage() {}

func (x *Azure) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Azure.ProtoReflect.Descriptor instead.
func (*Azure) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *Azure) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *Azure) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Azure) GetUploaded() string {
	if x != nil {
		return x.Uploaded
	}
	return ""
}

func (x *Azure) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Azure) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Bitbucket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Repository    string                 `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	Workspace     string                 `protobuf:"bytes,3,opt,name=workspace,proto3" json:"workspace,omitempty"`
	SnippetId     string                 `protobuf:"bytes,4,opt,name=snippet_id,json=snippetId,proto3" json:"snippet_id,omitempty"`
	Title         string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Commit        string                 `protobuf:"bytes,6,opt,name=commit,proto3" json:"commit,omitempty"`
	Email         string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Link          string                 `protobuf:"bytes,8,opt,name=link,proto3" json:"link,omitempty"`
	Timestamp     string                 `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Line          int64                  `protobuf:"varint,10,opt,name=line,proto3" json:"line,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bitbucket) Reset() {
	*x = Bitbucket{}
	mi := &file_source_metadata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bitbucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bitbucket) ProtoMessage() {}

func (x *Bitbucket) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bitbucket.ProtoReflect.Descriptor instead.
func (*Bitbucket) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *Bitbucket) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Bitbucket) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Bitbucket) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *Bitbucket) GetSnippetId() string {
	if x != nil {
		return x.SnippetId
	}
	return ""
}

func (x *Bitbucket) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Bitbucket) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Bitbucket) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Bitbucket) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Bitbucket) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Bitbucket) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

type Buildkite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Org           string                 `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Pipeline      string                 `protobuf:"bytes,2,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Link          string                 `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Email         string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	BuildNumber   int64                  `protobuf:"varint,5,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	Timestamp     string                 `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Buildkite) Reset() {
	*x = Buildkite{}
	mi := &file_source_metadata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Buildkite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buildkite) ProtoMessage() {}

func (x *Buildkite) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buildkite.ProtoReflect.Descriptor instead.
func (*Buildkite) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *Buildkite) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *Buildkite) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *Buildkite) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Buildkite) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Buildkite) GetBuildNumber() int64 {
	if x != nil {
		return x.BuildNumber
	}
	return 0
}

func (x *Buildkite) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type CircleCI struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VcsType       string                 `protobuf:"bytes,1,opt,name=vcs_type,json=vcsType,proto3" json:"vcs_type,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Repository    string                 `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	BuildNumber   int64                  `protobuf:"varint,4,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	BuildStep     string                 `protobuf:"bytes,5,opt,name=build_step,json=buildStep,proto3" json:"build_step,omitempty"`
	Link          string                 `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	Email         string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CircleCI) Reset() {
	*x = CircleCI{}
	mi := &file_source_metadata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircleCI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircleCI) ProtoMessage() {}

func (x *CircleCI) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircleCI.ProtoReflect.Descriptor instead.
func (*CircleCI) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{3}
}

func (x *CircleCI) GetVcsType() string {
	if x != nil {
		return x.VcsType
	}
	return ""
}

func (x *CircleCI) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CircleCI) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *CircleCI) GetBuildNumber() int64 {
	if x != nil {
		return x.BuildNumber
	}
	return 0
}

func (x *CircleCI) GetBuildStep() string {
	if x != nil {
		return x.BuildStep
	}
	return ""
}

func (x *CircleCI) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *CircleCI) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type TravisCI struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Repository    string                 `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	BuildNumber   string                 `protobuf:"bytes,4,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	JobNumber     string                 `protobuf:"bytes,5,opt,name=job_number,json=jobNumber,proto3" json:"job_number,omitempty"`
	Link          string                 `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	Public        bool                   `protobuf:"varint,7,opt,name=public,proto3" json:"public,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TravisCI) Reset() {
	*x = TravisCI{}
	mi := &file_source_metadata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TravisCI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TravisCI) ProtoMessage() {}

func (x *TravisCI) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TravisCI.ProtoReflect.Descriptor instead.
func (*TravisCI) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{4}
}

func (x *TravisCI) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TravisCI) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *TravisCI) GetBuildNumber() string {
	if x != nil {
		return x.BuildNumber
	}
	return ""
}

func (x *TravisCI) GetJobNumber() string {
	if x != nil {
		return x.JobNumber
	}
	return ""
}

func (x *TravisCI) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *TravisCI) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

type Confluence struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          string                 `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Space         string                 `protobuf:"bytes,2,opt,name=space,proto3" json:"space,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Link          string                 `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	Email         string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Timestamp     string                 `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Location      string                 `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	File          string                 `protobuf:"bytes,8,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Confluence) Reset() {
	*x = Confluence{}
	mi := &file_source_metadata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Confluence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Confluence) ProtoMessage() {}

func (x *Confluence) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Confluence.ProtoReflect.Descriptor instead.
func (*Confluence) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{5}
}

func (x *Confluence) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *Confluence) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *Confluence) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Confluence) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Confluence) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Confluence) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Confluence) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Confluence) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type Docker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Image         string                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Layer         string                 `protobuf:"bytes,3,opt,name=layer,proto3" json:"layer,omitempty"`
	Tag           string                 `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Docker) Reset() {
	*x = Docker{}
	mi := &file_source_metadata_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Docker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Docker) ProtoMessage() {}

func (x *Docker) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Docker.ProtoReflect.Descriptor instead.
func (*Docker) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{6}
}

func (x *Docker) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Docker) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Docker) GetLayer() string {
	if x != nil {
		return x.Layer
	}
	return ""
}

func (x *Docker) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type ECR struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Layer         string                 `protobuf:"bytes,2,opt,name=layer,proto3" json:"layer,omitempty"`
	Image         string                 `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Registry      string                 `protobuf:"bytes,4,opt,name=registry,proto3" json:"registry,omitempty"`
	Region        string                 `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Link          string                 `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	Email         string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECR) Reset() {
	*x = ECR{}
	mi := &file_source_metadata_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECR) ProtoMessage() {}

func (x *ECR) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECR.ProtoReflect.Descriptor instead.
func (*ECR) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{7}
}

func (x *ECR) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ECR) GetLayer() string {
	if x != nil {
		return x.Layer
	}
	return ""
}

func (x *ECR) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ECR) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *ECR) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ECR) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *ECR) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Filesystem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Link          string                 `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Email         string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Line          int64                  `protobuf:"varint,4,opt,name=line,proto3" json:"line,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filesystem) Reset() {
	*x = Filesystem{}
	mi := &file_source_metadata_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filesystem) ProtoMessage() {}

func (x *Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filesystem.ProtoReflect.Descriptor instead.
func (*Filesystem) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{8}
}

func (x *Filesystem) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Filesystem) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Filesystem) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Filesystem) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

type Git struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commit        string                 `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	File          string                 `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Email         string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Repository    string                 `protobuf:"bytes,4,opt,name=repository,proto3" json:"repository,omitempty"`
	Timestamp     string                 `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Line          int64                  `protobuf:"varint,6,opt,name=line,proto3" json:"line,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Git) Reset() {
	*x = Git{}
	mi := &file_source_metadata_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Git) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Git) ProtoMessage() {}

func (x *Git) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Git.ProtoReflect.Descriptor instead.
func (*Git) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{9}
}

func (x *Git) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Git) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Git) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Git) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Git) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Git) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

type Github struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Link          string                 `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Repository    string                 `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	Commit        string                 `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	Email         string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	File          string                 `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
	Timestamp     string                 `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Line          int64                  `protobuf:"varint,8,opt,name=line,proto3" json:"line,omitempty"`
	Visibility    Visibility             `protobuf:"varint,9,opt,name=visibility,proto3,enum=source_metadata.Visibility" json:"visibility,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Github) Reset() {
	*x = Github{}
	mi := &file_source_metadata_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Github) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Github) ProtoMessage() {}

func (x *Github) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Github.ProtoReflect.Descriptor instead.
func (*Github) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{10}
}

func (x *Github) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Github) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Github) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Github) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Github) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Github) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Github) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Github) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Github) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_public
}

type Gitlab struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commit        string                 `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	File          string                 `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Link          string                 `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Email         string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Repository    string                 `protobuf:"bytes,5,opt,name=repository,proto3" json:"repository,omitempty"`
	Timestamp     string                 `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Line          int64                  `protobuf:"varint,7,opt,name=line,proto3" json:"line,omitempty"`
	ProjectId     int64                  `protobuf:"varint,8,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectName   string                 `protobuf:"bytes,9,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	ProjectOwner  string                 `protobuf:"bytes,10,opt,name=project_owner,json=projectOwner,proto3" json:"project_owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gitlab) Reset() {
	*x = Gitlab{}
	mi := &file_source_metadata_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gitlab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gitlab) ProtoMessage() {}

func (x *Gitlab) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gitlab.ProtoReflect.Descriptor instead.
func (*Gitlab) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{11}
}

func (x *Gitlab) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Gitlab) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Gitlab) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Gitlab) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Gitlab) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Gitlab) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Gitlab) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Gitlab) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Gitlab) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Gitlab) GetProjectOwner() string {
	if x != nil {
		return x.ProjectOwner
	}
	return ""
}

type GCS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bucket        string                 `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Link          string                 `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Email         string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Acls          []string               `protobuf:"bytes,7,rep,name=acls,proto3" json:"acls,omitempty"`
	ContentType   string                 `protobuf:"bytes,8,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GCS) Reset() {
	*x = GCS{}
	mi := &file_source_metadata_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCS) ProtoMessage() {}

func (x *GCS) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCS.ProtoReflect.Descriptor instead.
func (*GCS) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{12}
}

func (x *GCS) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GCS) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GCS) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *GCS) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GCS) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GCS) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *GCS) GetAcls() []string {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *GCS) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type Huggingface struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Link          string                 `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Repository    string                 `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	Commit        string                 `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	Email         string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	File          string                 `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
	Timestamp     string                 `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Line          int64                  `protobuf:"varint,8,opt,name=line,proto3" json:"line,omitempty"`
	Visibility    Visibility             `protobuf:"varint,9,opt,name=visibility,proto3,enum=source_metadata.Visibility" json:"visibility,omitempty"`
	ResourceType  string                 `protobuf:"bytes,10,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Huggingface) Reset() {
	*x = Huggingface{}
	mi := &file_source_metadata_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Huggingface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Huggingface) ProtoMessage() {}

func (x *Huggingface) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Huggingface.ProtoReflect.Descriptor instead.
func (*Huggingface) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{13}
}

func (x *Huggingface) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Huggingface) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Huggingface) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Huggingface) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Huggingface) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Huggingface) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Huggingface) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Huggingface) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Huggingface) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_public
}

func (x *Huggingface) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

type Jira struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Issue         string                 `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	Author        string                 `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Link          string                 `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Location      string                 `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Email         string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Timestamp     string                 `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Jira) Reset() {
	*x = Jira{}
	mi := &file_source_metadata_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jira) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jira) ProtoMessage() {}

func (x *Jira) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jira.ProtoReflect.Descriptor instead.
func (*Jira) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{14}
}

func (x *Jira) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

func (x *Jira) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Jira) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Jira) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Jira) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Jira) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type NPM struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Package       string                 `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	Release       string                 `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty"`
	Link          string                 `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	Email         string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NPM) Reset() {
	*x = NPM{}
	mi := &file_source_metadata_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NPM) ProtoMessage() {}

func (x *NPM) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NPM.ProtoReflect.Descriptor instead.
func (*NPM) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{15}
}

func (x *NPM) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *NPM) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *NPM) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *NPM) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *NPM) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type PyPi struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Package       string                 `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	Release       string                 `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty"`
	Link          string                 `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	Email         string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PyPi) Reset() {
	*x = PyPi{}
	mi := &file_source_metadata_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PyPi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PyPi) ProtoMessage() {}

func (x *PyPi) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PyPi.ProtoReflect.Descriptor instead.
func (*PyPi) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{16}
}

func (x *PyPi) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *PyPi) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *PyPi) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *PyPi) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *PyPi) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type S3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bucket        string                 `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	File          string                 `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Link          string                 `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Email         string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Timestamp     string                 `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3) Reset() {
	*x = S3{}
	mi := &file_source_metadata_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3) ProtoMessage() {}

func (x *S3) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3.ProtoReflect.Descriptor instead.
func (*S3) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{17}
}

func (x *S3) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *S3) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *S3) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *S3) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type Slack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ChannelName   string                 `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	Timestamp     string                 `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId        string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Link          string                 `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	File          string                 `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
	Email         string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Visibility    Visibility             `protobuf:"varint,8,opt,name=visibility,proto3,enum=source_metadata.Visibility" json:"visibility,omitempty"`
	Location      string                 `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Slack) Reset() {
	*x = Slack{}
	mi := &file_source_metadata_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Slack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slack) ProtoMessage() {}

func (x *Slack) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slack.ProtoReflect.Descriptor instead.
func (*Slack) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{18}
}

func (x *Slack) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Slack) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *Slack) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Slack) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Slack) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Slack) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Slack) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Slack) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_public
}

func (x *Slack) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type Gerrit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commit        string                 `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	File          string                 `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Email         string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Project       string                 `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"` // projects are what Gerrit calls repositories
	Timestamp     string                 `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Line          int64                  `protobuf:"varint,6,opt,name=line,proto3" json:"line,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gerrit) Reset() {
	*x = Gerrit{}
	mi := &file_source_metadata_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gerrit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gerrit) ProtoMessage() {}

func (x *Gerrit) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gerrit.ProtoReflect.Descriptor instead.
func (*Gerrit) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{19}
}

func (x *Gerrit) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Gerrit) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Gerrit) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Gerrit) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Gerrit) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Gerrit) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

type Test struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Test) Reset() {
	*x = Test{}
	mi := &file_source_metadata_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{20}
}

func (x *Test) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type Jenkins struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectName   string                 `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	BuildNumber   int64                  `protobuf:"varint,2,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	Link          string                 `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Timestamp     string                 `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Jenkins) Reset() {
	*x = Jenkins{}
	mi := &file_source_metadata_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jenkins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jenkins) ProtoMessage() {}

func (x *Jenkins) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jenkins.ProtoReflect.Descriptor instead.
func (*Jenkins) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{21}
}

func (x *Jenkins) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Jenkins) GetBuildNumber() int64 {
	if x != nil {
		return x.BuildNumber
	}
	return 0
}

func (x *Jenkins) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Jenkins) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type Teams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ChannelName   string                 `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	Timestamp     string                 `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId        string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Link          string                 `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	File          string                 `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
	Email         string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Location      string                 `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	TeamName      string                 `protobuf:"bytes,9,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
	TeamId        string                 `protobuf:"bytes,10,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Teams) Reset() {
	*x = Teams{}
	mi := &file_source_metadata_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Teams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Teams) ProtoMessage() {}

func (x *Teams) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Teams.ProtoReflect.Descriptor instead.
func (*Teams) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{22}
}

func (x *Teams) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Teams) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *Teams) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Teams) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Teams) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Teams) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Teams) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Teams) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Teams) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *Teams) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

// https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-FileInfo
type Artifactory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repo          string                 `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Link          string                 `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Timestamp     string                 `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Username      string                 `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Email         string                 `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Artifactory) Reset() {
	*x = Artifactory{}
	mi := &file_source_metadata_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Artifactory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifactory) ProtoMessage() {}

func (x *Artifactory) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifactory.ProtoReflect.Descriptor instead.
func (*Artifactory) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{23}
}

func (x *Artifactory) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *Artifactory) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Artifactory) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Artifactory) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Artifactory) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Artifactory) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Syslog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hostname      string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Appname       string                 `protobuf:"bytes,2,opt,name=appname,proto3" json:"appname,omitempty"`
	Procid        string                 `protobuf:"bytes,3,opt,name=procid,proto3" json:"procid,omitempty"`
	Timestamp     string                 `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Client        string                 `protobuf:"bytes,5,opt,name=client,proto3" json:"client,omitempty"`
	Facility      string                 `protobuf:"bytes,6,opt,name=facility,proto3" json:"facility,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Syslog) Reset() {
	*x = Syslog{}
	mi := &file_source_metadata_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Syslog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Syslog) ProtoMessage() {}

func (x *Syslog) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Syslog.ProtoReflect.Descriptor instead.
func (*Syslog) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{24}
}

func (x *Syslog) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Syslog) GetAppname() string {
	if x != nil {
		return x.Appname
	}
	return ""
}

func (x *Syslog) GetProcid() string {
	if x != nil {
		return x.Procid
	}
	return ""
}

func (x *Syslog) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Syslog) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *Syslog) GetFacility() string {
	if x != nil {
		return x.Facility
	}
	return ""
}

type Forager struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Metadata:
	//
	//	*Forager_Github
	//	*Forager_Npm
	//	*Forager_Pypi
	Metadata      isForager_Metadata `protobuf_oneof:"metadata"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Forager) Reset() {
	*x = Forager{}
	mi := &file_source_metadata_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Forager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forager) ProtoMessage() {}

func (x *Forager) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forager.ProtoReflect.Descriptor instead.
func (*Forager) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{25}
}

func (x *Forager) GetMetadata() isForager_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Forager) GetGithub() *Github {
	if x != nil {
		if x, ok := x.Metadata.(*Forager_Github); ok {
			return x.Github
		}
	}
	return nil
}

func (x *Forager) GetNpm() *NPM {
	if x != nil {
		if x, ok := x.Metadata.(*Forager_Npm); ok {
			return x.Npm
		}
	}
	return nil
}

func (x *Forager) GetPypi() *PyPi {
	if x != nil {
		if x, ok := x.Metadata.(*Forager_Pypi); ok {
			return x.Pypi
		}
	}
	return nil
}

type isForager_Metadata interface {
	isForager_Metadata()
}

type Forager_Github struct {
	Github *Github `protobuf:"bytes,1,opt,name=github,proto3,oneof"`
}

type Forager_Npm struct {
	Npm *NPM `protobuf:"bytes,2,opt,name=npm,proto3,oneof"`
}

type Forager_Pypi struct {
	Pypi *PyPi `protobuf:"bytes,3,opt,name=pypi,proto3,oneof"`
}

func (*Forager_Github) isForager_Metadata() {}

func (*Forager_Npm) isForager_Metadata() {}

func (*Forager_Pypi) isForager_Metadata() {}

type SharePoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Link          string                 `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Timestamp     string                 `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Author        string                 `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Views         int64                  `protobuf:"varint,5,opt,name=views,proto3" json:"views,omitempty"`
	Docid         string                 `protobuf:"bytes,6,opt,name=docid,proto3" json:"docid,omitempty"`
	Email         string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SharePoint) Reset() {
	*x = SharePoint{}
	mi := &file_source_metadata_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharePoint) ProtoMessage() {}

func (x *SharePoint) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharePoint.ProtoReflect.Descriptor instead.
func (*SharePoint) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{26}
}

func (x *SharePoint) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *SharePoint) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *SharePoint) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *SharePoint) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SharePoint) GetViews() int64 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *SharePoint) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *SharePoint) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GoogleDrive struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	File           string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Link           string                 `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Email          string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Timestamp      string                 `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Shared         bool                   `protobuf:"varint,5,opt,name=shared,proto3" json:"shared,omitempty"`
	LastModifiedBy string                 `protobuf:"bytes,6,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	Path           string                 `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GoogleDrive) Reset() {
	*x = GoogleDrive{}
	mi := &file_source_metadata_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoogleDrive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleDrive) ProtoMessage() {}

func (x *GoogleDrive) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleDrive.ProtoReflect.Descriptor instead.
func (*GoogleDrive) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{27}
}

func (x *GoogleDrive) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *GoogleDrive) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *GoogleDrive) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GoogleDrive) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *GoogleDrive) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

func (x *GoogleDrive) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *GoogleDrive) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type AzureRepos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Link          string                 `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Repository    string                 `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	Commit        string                 `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	Email         string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	File          string                 `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
	Timestamp     string                 `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Line          int64                  `protobuf:"varint,8,opt,name=line,proto3" json:"line,omitempty"`
	Visibility    Visibility             `protobuf:"varint,9,opt,name=visibility,proto3,enum=source_metadata.Visibility" json:"visibility,omitempty"`
	Project       string                 `protobuf:"bytes,10,opt,name=project,proto3" json:"project,omitempty"`
	Organization  string                 `protobuf:"bytes,11,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AzureRepos) Reset() {
	*x = AzureRepos{}
	mi := &file_source_metadata_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AzureRepos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureRepos) ProtoMessage() {}

func (x *AzureRepos) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureRepos.ProtoReflect.Descriptor instead.
func (*AzureRepos) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{28}
}

func (x *AzureRepos) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *AzureRepos) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AzureRepos) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *AzureRepos) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *AzureRepos) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AzureRepos) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *AzureRepos) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *AzureRepos) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *AzureRepos) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_public
}

func (x *AzureRepos) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *AzureRepos) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type Postman struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Link            string                 `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	WorkspaceUuid   string                 `protobuf:"bytes,2,opt,name=workspace_uuid,json=workspaceUuid,proto3" json:"workspace_uuid,omitempty"`
	WorkspaceName   string                 `protobuf:"bytes,3,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	CollectionId    string                 `protobuf:"bytes,5,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CollectionName  string                 `protobuf:"bytes,6,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	EnvironmentId   string                 `protobuf:"bytes,7,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	EnvironmentName string                 `protobuf:"bytes,8,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	RequestId       string                 `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RequestName     string                 `protobuf:"bytes,10,opt,name=request_name,json=requestName,proto3" json:"request_name,omitempty"`
	FolderId        string                 `protobuf:"bytes,11,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	FolderName      string                 `protobuf:"bytes,12,opt,name=folder_name,json=folderName,proto3" json:"folder_name,omitempty"`
	FieldType       string                 `protobuf:"bytes,13,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty"` // Do not use this field for transport. It is only used for output to STDOUT.
	LocationType    PostmanLocationType    `protobuf:"varint,16,opt,name=location_type,json=locationType,proto3,enum=source_metadata.PostmanLocationType" json:"location_type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Postman) Reset() {
	*x = Postman{}
	mi := &file_source_metadata_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Postman) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Postman) ProtoMessage() {}

func (x *Postman) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Postman.ProtoReflect.Descriptor instead.
func (*Postman) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{29}
}

func (x *Postman) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Postman) GetWorkspaceUuid() string {
	if x != nil {
		return x.WorkspaceUuid
	}
	return ""
}

func (x *Postman) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *Postman) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Postman) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *Postman) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *Postman) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *Postman) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Postman) GetRequestName() string {
	if x != nil {
		return x.RequestName
	}
	return ""
}

func (x *Postman) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *Postman) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

func (x *Postman) GetFieldType() string {
	if x != nil {
		return x.FieldType
	}
	return ""
}

func (x *Postman) GetLocationType() PostmanLocationType {
	if x != nil {
		return x.LocationType
	}
	return PostmanLocationType_UNKNOWN_POSTMAN
}

type Vector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SourceType    string                 `protobuf:"bytes,2,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	Host          string                 `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Locator       string                 `protobuf:"bytes,4,opt,name=locator,proto3" json:"locator,omitempty"`
	Link          string                 `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector) Reset() {
	*x = Vector{}
	mi := &file_source_metadata_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{30}
}

func (x *Vector) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Vector) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *Vector) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Vector) GetLocator() string {
	if x != nil {
		return x.Locator
	}
	return ""
}

func (x *Vector) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type Webhook struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*Webhook_Vector
	Data          isWebhook_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Webhook) Reset() {
	*x = Webhook{}
	mi := &file_source_metadata_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhook) ProtoMessage() {}

func (x *Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhook.ProtoReflect.Descriptor instead.
func (*Webhook) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{31}
}

func (x *Webhook) GetData() isWebhook_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Webhook) GetVector() *Vector {
	if x != nil {
		if x, ok := x.Data.(*Webhook_Vector); ok {
			return x.Vector
		}
	}
	return nil
}

type isWebhook_Data interface {
	isWebhook_Data()
}

type Webhook_Vector struct {
	Vector *Vector `protobuf:"bytes,1,opt,name=vector,proto3,oneof"`
}

func (*Webhook_Vector) isWebhook_Data() {}

type Elasticsearch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         string                 `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	DocumentId    string                 `protobuf:"bytes,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Timestamp     string                 `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Elasticsearch) Reset() {
	*x = Elasticsearch{}
	mi := &file_source_metadata_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Elasticsearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Elasticsearch) ProtoMessage() {}

func (x *Elasticsearch) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Elasticsearch.ProtoReflect.Descriptor instead.
func (*Elasticsearch) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{32}
}

func (x *Elasticsearch) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Elasticsearch) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *Elasticsearch) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type Sentry struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	EventId                 string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	OrganizationId          string                 `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	OrganizationSlug        string                 `protobuf:"bytes,3,opt,name=organization_slug,json=organizationSlug,proto3" json:"organization_slug,omitempty"`
	OrganizationDateCreated string                 `protobuf:"bytes,4,opt,name=organization_date_created,json=organizationDateCreated,proto3" json:"organization_date_created,omitempty"`
	ProjectId               string                 `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectSlug             string                 `protobuf:"bytes,6,opt,name=project_slug,json=projectSlug,proto3" json:"project_slug,omitempty"`
	IssueId                 string                 `protobuf:"bytes,7,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	DateCreated             string                 `protobuf:"bytes,8,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	Link                    string                 `protobuf:"bytes,9,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Sentry) Reset() {
	*x = Sentry{}
	mi := &file_source_metadata_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sentry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentry) ProtoMessage() {}

func (x *Sentry) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentry.ProtoReflect.Descriptor instead.
func (*Sentry) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{33}
}

func (x *Sentry) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Sentry) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Sentry) GetOrganizationSlug() string {
	if x != nil {
		return x.OrganizationSlug
	}
	return ""
}

func (x *Sentry) GetOrganizationDateCreated() string {
	if x != nil {
		return x.OrganizationDateCreated
	}
	return ""
}

func (x *Sentry) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Sentry) GetProjectSlug() string {
	if x != nil {
		return x.ProjectSlug
	}
	return ""
}

func (x *Sentry) GetIssueId() string {
	if x != nil {
		return x.IssueId
	}
	return ""
}

func (x *Sentry) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

func (x *Sentry) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type Stdin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stdin) Reset() {
	*x = Stdin{}
	mi := &file_source_metadata_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stdin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stdin) ProtoMessage() {}

func (x *Stdin) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stdin.ProtoReflect.Descriptor instead.
func (*Stdin) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{34}
}

type SlackContinuous struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ChannelName   string                 `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	Timestamp     string                 `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId        string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	File          string                 `protobuf:"bytes,5,opt,name=file,proto3" json:"file,omitempty"`
	Email         string                 `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Visibility    Visibility             `protobuf:"varint,7,opt,name=visibility,proto3,enum=source_metadata.Visibility" json:"visibility,omitempty"`
	Location      string                 `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SlackContinuous) Reset() {
	*x = SlackContinuous{}
	mi := &file_source_metadata_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlackContinuous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackContinuous) ProtoMessage() {}

func (x *SlackContinuous) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackContinuous.ProtoReflect.Descriptor instead.
func (*SlackContinuous) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{35}
}

func (x *SlackContinuous) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SlackContinuous) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *SlackContinuous) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *SlackContinuous) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SlackContinuous) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *SlackContinuous) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SlackContinuous) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_public
}

func (x *SlackContinuous) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type MetaData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*MetaData_Azure
	//	*MetaData_Bitbucket
	//	*MetaData_Circleci
	//	*MetaData_Confluence
	//	*MetaData_Docker
	//	*MetaData_Ecr
	//	*MetaData_Gcs
	//	*MetaData_Github
	//	*MetaData_Gitlab
	//	*MetaData_Jira
	//	*MetaData_Npm
	//	*MetaData_Pypi
	//	*MetaData_S3
	//	*MetaData_Slack
	//	*MetaData_Filesystem
	//	*MetaData_Git
	//	*MetaData_Test
	//	*MetaData_Buildkite
	//	*MetaData_Gerrit
	//	*MetaData_Jenkins
	//	*MetaData_Teams
	//	*MetaData_Artifactory
	//	*MetaData_Syslog
	//	*MetaData_Forager
	//	*MetaData_Sharepoint
	//	*MetaData_GoogleDrive
	//	*MetaData_AzureRepos
	//	*MetaData_TravisCI
	//	*MetaData_Postman
	//	*MetaData_Webhook
	//	*MetaData_Elasticsearch
	//	*MetaData_Huggingface
	//	*MetaData_Sentry
	//	*MetaData_Stdin
	//	*MetaData_SlackContinuous
	Data          isMetaData_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	mi := &file_source_metadata_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_source_metadata_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_source_metadata_proto_rawDescGZIP(), []int{36}
}

func (x *MetaData) GetData() isMetaData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MetaData) GetAzure() *Azure {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Azure); ok {
			return x.Azure
		}
	}
	return nil
}

func (x *MetaData) GetBitbucket() *Bitbucket {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Bitbucket); ok {
			return x.Bitbucket
		}
	}
	return nil
}

func (x *MetaData) GetCircleci() *CircleCI {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Circleci); ok {
			return x.Circleci
		}
	}
	return nil
}

func (x *MetaData) GetConfluence() *Confluence {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Confluence); ok {
			return x.Confluence
		}
	}
	return nil
}

func (x *MetaData) GetDocker() *Docker {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Docker); ok {
			return x.Docker
		}
	}
	return nil
}

func (x *MetaData) GetEcr() *ECR {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Ecr); ok {
			return x.Ecr
		}
	}
	return nil
}

func (x *MetaData) GetGcs() *GCS {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Gcs); ok {
			return x.Gcs
		}
	}
	return nil
}

func (x *MetaData) GetGithub() *Github {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Github); ok {
			return x.Github
		}
	}
	return nil
}

func (x *MetaData) GetGitlab() *Gitlab {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Gitlab); ok {
			return x.Gitlab
		}
	}
	return nil
}

func (x *MetaData) GetJira() *Jira {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Jira); ok {
			return x.Jira
		}
	}
	return nil
}

func (x *MetaData) GetNpm() *NPM {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Npm); ok {
			return x.Npm
		}
	}
	return nil
}

func (x *MetaData) GetPypi() *PyPi {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Pypi); ok {
			return x.Pypi
		}
	}
	return nil
}

func (x *MetaData) GetS3() *S3 {
	if x != nil {
		if x, ok := x.Data.(*MetaData_S3); ok {
			return x.S3
		}
	}
	return nil
}

func (x *MetaData) GetSlack() *Slack {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Slack); ok {
			return x.Slack
		}
	}
	return nil
}

func (x *MetaData) GetFilesystem() *Filesystem {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Filesystem); ok {
			return x.Filesystem
		}
	}
	return nil
}

func (x *MetaData) GetGit() *Git {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Git); ok {
			return x.Git
		}
	}
	return nil
}

func (x *MetaData) GetTest() *Test {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Test); ok {
			return x.Test
		}
	}
	return nil
}

func (x *MetaData) GetBuildkite() *Buildkite {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Buildkite); ok {
			return x.Buildkite
		}
	}
	return nil
}

func (x *MetaData) GetGerrit() *Gerrit {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Gerrit); ok {
			return x.Gerrit
		}
	}
	return nil
}

func (x *MetaData) GetJenkins() *Jenkins {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Jenkins); ok {
			return x.Jenkins
		}
	}
	return nil
}

func (x *MetaData) GetTeams() *Teams {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Teams); ok {
			return x.Teams
		}
	}
	return nil
}

func (x *MetaData) GetArtifactory() *Artifactory {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Artifactory); ok {
			return x.Artifactory
		}
	}
	return nil
}

func (x *MetaData) GetSyslog() *Syslog {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Syslog); ok {
			return x.Syslog
		}
	}
	return nil
}

func (x *MetaData) GetForager() *Forager {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Forager); ok {
			return x.Forager
		}
	}
	return nil
}

func (x *MetaData) GetSharepoint() *SharePoint {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Sharepoint); ok {
			return x.Sharepoint
		}
	}
	return nil
}

func (x *MetaData) GetGoogleDrive() *GoogleDrive {
	if x != nil {
		if x, ok := x.Data.(*MetaData_GoogleDrive); ok {
			return x.GoogleDrive
		}
	}
	return nil
}

func (x *MetaData) GetAzureRepos() *AzureRepos {
	if x != nil {
		if x, ok := x.Data.(*MetaData_AzureRepos); ok {
			return x.AzureRepos
		}
	}
	return nil
}

func (x *MetaData) GetTravisCI() *TravisCI {
	if x != nil {
		if x, ok := x.Data.(*MetaData_TravisCI); ok {
			return x.TravisCI
		}
	}
	return nil
}

func (x *MetaData) GetPostman() *Postman {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Postman); ok {
			return x.Postman
		}
	}
	return nil
}

func (x *MetaData) GetWebhook() *Webhook {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Webhook); ok {
			return x.Webhook
		}
	}
	return nil
}

func (x *MetaData) GetElasticsearch() *Elasticsearch {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Elasticsearch); ok {
			return x.Elasticsearch
		}
	}
	return nil
}

func (x *MetaData) GetHuggingface() *Huggingface {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Huggingface); ok {
			return x.Huggingface
		}
	}
	return nil
}

func (x *MetaData) GetSentry() *Sentry {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Sentry); ok {
			return x.Sentry
		}
	}
	return nil
}

func (x *MetaData) GetStdin() *Stdin {
	if x != nil {
		if x, ok := x.Data.(*MetaData_Stdin); ok {
			return x.Stdin
		}
	}
	return nil
}

func (x *MetaData) GetSlackContinuous() *SlackContinuous {
	if x != nil {
		if x, ok := x.Data.(*MetaData_SlackContinuous); ok {
			return x.SlackContinuous
		}
	}
	return nil
}

type isMetaData_Data interface {
	isMetaData_Data()
}

type MetaData_Azure struct {
	Azure *Azure `protobuf:"bytes,1,opt,name=azure,proto3,oneof"`
}

type MetaData_Bitbucket struct {
	Bitbucket *Bitbucket `protobuf:"bytes,2,opt,name=bitbucket,proto3,oneof"`
}

type MetaData_Circleci struct {
	Circleci *CircleCI `protobuf:"bytes,3,opt,name=circleci,proto3,oneof"`
}

type MetaData_Confluence struct {
	Confluence *Confluence `protobuf:"bytes,4,opt,name=confluence,proto3,oneof"`
}

type MetaData_Docker struct {
	Docker *Docker `protobuf:"bytes,5,opt,name=docker,proto3,oneof"`
}

type MetaData_Ecr struct {
	Ecr *ECR `protobuf:"bytes,6,opt,name=ecr,proto3,oneof"`
}

type MetaData_Gcs struct {
	Gcs *GCS `protobuf:"bytes,7,opt,name=gcs,proto3,oneof"`
}

type MetaData_Github struct {
	Github *Github `protobuf:"bytes,8,opt,name=github,proto3,oneof"`
}

type MetaData_Gitlab struct {
	Gitlab *Gitlab `protobuf:"bytes,9,opt,name=gitlab,proto3,oneof"`
}

type MetaData_Jira struct {
	Jira *Jira `protobuf:"bytes,10,opt,name=jira,proto3,oneof"`
}

type MetaData_Npm struct {
	Npm *NPM `protobuf:"bytes,11,opt,name=npm,proto3,oneof"`
}

type MetaData_Pypi struct {
	Pypi *PyPi `protobuf:"bytes,12,opt,name=pypi,proto3,oneof"`
}

type MetaData_S3 struct {
	S3 *S3 `protobuf:"bytes,13,opt,name=s3,proto3,oneof"`
}

type MetaData_Slack struct {
	Slack *Slack `protobuf:"bytes,14,opt,name=slack,proto3,oneof"`
}

type MetaData_Filesystem struct {
	Filesystem *Filesystem `protobuf:"bytes,15,opt,name=filesystem,proto3,oneof"`
}

type MetaData_Git struct {
	Git *Git `protobuf:"bytes,16,opt,name=git,proto3,oneof"`
}

type MetaData_Test struct {
	Test *Test `protobuf:"bytes,17,opt,name=test,proto3,oneof"`
}

type MetaData_Buildkite struct {
	Buildkite *Buildkite `protobuf:"bytes,18,opt,name=buildkite,proto3,oneof"`
}

type MetaData_Gerrit struct {
	Gerrit *Gerrit `protobuf:"bytes,19,opt,name=gerrit,proto3,oneof"`
}

type MetaData_Jenkins struct {
	Jenkins *Jenkins `protobuf:"bytes,20,opt,name=jenkins,proto3,oneof"`
}

type MetaData_Teams struct {
	Teams *Teams `protobuf:"bytes,21,opt,name=teams,proto3,oneof"`
}

type MetaData_Artifactory struct {
	Artifactory *Artifactory `protobuf:"bytes,22,opt,name=artifactory,proto3,oneof"`
}

type MetaData_Syslog struct {
	Syslog *Syslog `protobuf:"bytes,23,opt,name=syslog,proto3,oneof"`
}

type MetaData_Forager struct {
	Forager *Forager `protobuf:"bytes,24,opt,name=forager,proto3,oneof"`
}

type MetaData_Sharepoint struct {
	Sharepoint *SharePoint `protobuf:"bytes,25,opt,name=sharepoint,proto3,oneof"`
}

type MetaData_GoogleDrive struct {
	GoogleDrive *GoogleDrive `protobuf:"bytes,26,opt,name=googleDrive,proto3,oneof"`
}

type MetaData_AzureRepos struct {
	AzureRepos *AzureRepos `protobuf:"bytes,27,opt,name=azureRepos,proto3,oneof"`
}

type MetaData_TravisCI struct {
	TravisCI *TravisCI `protobuf:"bytes,28,opt,name=travisCI,proto3,oneof"`
}

type MetaData_Postman struct {
	Postman *Postman `protobuf:"bytes,29,opt,name=postman,proto3,oneof"`
}

type MetaData_Webhook struct {
	Webhook *Webhook `protobuf:"bytes,30,opt,name=webhook,proto3,oneof"`
}

type MetaData_Elasticsearch struct {
	Elasticsearch *Elasticsearch `protobuf:"bytes,31,opt,name=elasticsearch,proto3,oneof"`
}

type MetaData_Huggingface struct {
	Huggingface *Huggingface `protobuf:"bytes,32,opt,name=huggingface,proto3,oneof"`
}

type MetaData_Sentry struct {
	Sentry *Sentry `protobuf:"bytes,33,opt,name=sentry,proto3,oneof"`
}

type MetaData_Stdin struct {
	Stdin *Stdin `protobuf:"bytes,34,opt,name=stdin,proto3,oneof"`
}

type MetaData_SlackContinuous struct {
	SlackContinuous *SlackContinuous `protobuf:"bytes,35,opt,name=slackContinuous,proto3,oneof"`
}

func (*MetaData_Azure) isMetaData_Data() {}

func (*MetaData_Bitbucket) isMetaData_Data() {}

func (*MetaData_Circleci) isMetaData_Data() {}

func (*MetaData_Confluence) isMetaData_Data() {}

func (*MetaData_Docker) isMetaData_Data() {}

func (*MetaData_Ecr) isMetaData_Data() {}

func (*MetaData_Gcs) isMetaData_Data() {}

func (*MetaData_Github) isMetaData_Data() {}

func (*MetaData_Gitlab) isMetaData_Data() {}

func (*MetaData_Jira) isMetaData_Data() {}

func (*MetaData_Npm) isMetaData_Data() {}

func (*MetaData_Pypi) isMetaData_Data() {}

func (*MetaData_S3) isMetaData_Data() {}

func (*MetaData_Slack) isMetaData_Data() {}

func (*MetaData_Filesystem) isMetaData_Data() {}

func (*MetaData_Git) isMetaData_Data() {}

func (*MetaData_Test) isMetaData_Data() {}

func (*MetaData_Buildkite) isMetaData_Data() {}

func (*MetaData_Gerrit) isMetaData_Data() {}

func (*MetaData_Jenkins) isMetaData_Data() {}

func (*MetaData_Teams) isMetaData_Data() {}

func (*MetaData_Artifactory) isMetaData_Data() {}

func (*MetaData_Syslog) isMetaData_Data() {}

func (*MetaData_Forager) isMetaData_Data() {}

func (*MetaData_Sharepoint) isMetaData_Data() {}

func (*MetaData_GoogleDrive) isMetaData_Data() {}

func (*MetaData_AzureRepos) isMetaData_Data() {}

func (*MetaData_TravisCI) isMetaData_Data() {}

func (*MetaData_Postman) isMetaData_Data() {}

func (*MetaData_Webhook) isMetaData_Data() {}

func (*MetaData_Elasticsearch) isMetaData_Data() {}

func (*MetaData_Huggingface) isMetaData_Data() {}

func (*MetaData_Sentry) isMetaData_Data() {}

func (*MetaData_Stdin) isMetaData_Data() {}

func (*MetaData_SlackContinuous) isMetaData_Data() {}

var File_source_metadata_proto protoreflect.FileDescriptor

const file_source_metadata_proto_rawDesc = "" +
	"\n" +
	"\x15source_metadata.proto\x12\x0fsource_metadata\x1a\x1fgoogle/protobuf/timestamp.proto\"\x7f\n" +
	"\x05Azure\x12\x1c\n" +
	"\tcontainer\x18\x01 \x01(\tR\tcontainer\x12\x12\n" +
	"\x04file\x18\x02 \x01(\tR\x04file\x12\x1a\n" +
	"\buploaded\x18\x03 \x01(\tR\buploaded\x12\x12\n" +
	"\x04link\x18\x04 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\x05 \x01(\tR\x05email\"\x86\x02\n" +
	"\tBitbucket\x12\x12\n" +
	"\x04file\x18\x01 \x01(\tR\x04file\x12\x1e\n" +
	"\n" +
	"repository\x18\x02 \x01(\tR\n" +
	"repository\x12\x1c\n" +
	"\tworkspace\x18\x03 \x01(\tR\tworkspace\x12\x1d\n" +
	"\n" +
	"snippet_id\x18\x04 \x01(\tR\tsnippetId\x12\x14\n" +
	"\x05title\x18\x05 \x01(\tR\x05title\x12\x16\n" +
	"\x06commit\x18\x06 \x01(\tR\x06commit\x12\x14\n" +
	"\x05email\x18\a \x01(\tR\x05email\x12\x12\n" +
	"\x04link\x18\b \x01(\tR\x04link\x12\x1c\n" +
	"\ttimestamp\x18\t \x01(\tR\ttimestamp\x12\x12\n" +
	"\x04line\x18\n" +
	" \x01(\x03R\x04line\"\xa4\x01\n" +
	"\tBuildkite\x12\x10\n" +
	"\x03org\x18\x01 \x01(\tR\x03org\x12\x1a\n" +
	"\bpipeline\x18\x02 \x01(\tR\bpipeline\x12\x12\n" +
	"\x04link\x18\x03 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\x04 \x01(\tR\x05email\x12!\n" +
	"\fbuild_number\x18\x05 \x01(\x03R\vbuildNumber\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\tR\ttimestamp\"\xcd\x01\n" +
	"\bCircleCI\x12\x19\n" +
	"\bvcs_type\x18\x01 \x01(\tR\avcsType\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1e\n" +
	"\n" +
	"repository\x18\x03 \x01(\tR\n" +
	"repository\x12!\n" +
	"\fbuild_number\x18\x04 \x01(\x03R\vbuildNumber\x12\x1d\n" +
	"\n" +
	"build_step\x18\x05 \x01(\tR\tbuildStep\x12\x12\n" +
	"\x04link\x18\x06 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\a \x01(\tR\x05email\"\xb4\x01\n" +
	"\bTravisCI\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1e\n" +
	"\n" +
	"repository\x18\x03 \x01(\tR\n" +
	"repository\x12!\n" +
	"\fbuild_number\x18\x04 \x01(\tR\vbuildNumber\x12\x1d\n" +
	"\n" +
	"job_number\x18\x05 \x01(\tR\tjobNumber\x12\x12\n" +
	"\x04link\x18\x06 \x01(\tR\x04link\x12\x16\n" +
	"\x06public\x18\a \x01(\bR\x06public\"\xc8\x01\n" +
	"\n" +
	"Confluence\x12\x12\n" +
	"\x04page\x18\x01 \x01(\tR\x04page\x12\x14\n" +
	"\x05space\x18\x02 \x01(\tR\x05space\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12\x12\n" +
	"\x04link\x18\x04 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\x05 \x01(\tR\x05email\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\tR\ttimestamp\x12\x1a\n" +
	"\blocation\x18\a \x01(\tR\blocation\x12\x12\n" +
	"\x04file\x18\b \x01(\tR\x04file\"Z\n" +
	"\x06Docker\x12\x12\n" +
	"\x04file\x18\x01 \x01(\tR\x04file\x12\x14\n" +
	"\x05image\x18\x02 \x01(\tR\x05image\x12\x14\n" +
	"\x05layer\x18\x03 \x01(\tR\x05layer\x12\x10\n" +
	"\x03tag\x18\x04 \x01(\tR\x03tag\"\xa3\x01\n" +
	"\x03ECR\x12\x12\n" +
	"\x04file\x18\x01 \x01(\tR\x04file\x12\x14\n" +
	"\x05layer\x18\x02 \x01(\tR\x05layer\x12\x14\n" +
	"\x05image\x18\x03 \x01(\tR\x05image\x12\x1a\n" +
	"\bregistry\x18\x04 \x01(\tR\bregistry\x12\x16\n" +
	"\x06region\x18\x05 \x01(\tR\x06region\x12\x12\n" +
	"\x04link\x18\x06 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\a \x01(\tR\x05email\"^\n" +
	"\n" +
	"Filesystem\x12\x12\n" +
	"\x04file\x18\x01 \x01(\tR\x04file\x12\x12\n" +
	"\x04link\x18\x02 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\x03 \x01(\tR\x05email\x12\x12\n" +
	"\x04line\x18\x04 \x01(\x03R\x04line\"\x99\x01\n" +
	"\x03Git\x12\x16\n" +
	"\x06commit\x18\x01 \x01(\tR\x06commit\x12\x12\n" +
	"\x04file\x18\x02 \x01(\tR\x04file\x12\x14\n" +
	"\x05email\x18\x03 \x01(\tR\x05email\x12\x1e\n" +
	"\n" +
	"repository\x18\x04 \x01(\tR\n" +
	"repository\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\tR\ttimestamp\x12\x12\n" +
	"\x04line\x18\x06 \x01(\x03R\x04line\"\x89\x02\n" +
	"\x06Github\x12\x12\n" +
	"\x04link\x18\x01 \x01(\tR\x04link\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1e\n" +
	"\n" +
	"repository\x18\x03 \x01(\tR\n" +
	"repository\x12\x16\n" +
	"\x06commit\x18\x04 \x01(\tR\x06commit\x12\x14\n" +
	"\x05email\x18\x05 \x01(\tR\x05email\x12\x12\n" +
	"\x04file\x18\x06 \x01(\tR\x04file\x12\x1c\n" +
	"\ttimestamp\x18\a \x01(\tR\ttimestamp\x12\x12\n" +
	"\x04line\x18\b \x01(\x03R\x04line\x12;\n" +
	"\n" +
	"visibility\x18\t \x01(\x0e2\x1b.source_metadata.VisibilityR\n" +
	"visibility\"\x97\x02\n" +
	"\x06Gitlab\x12\x16\n" +
	"\x06commit\x18\x01 \x01(\tR\x06commit\x12\x12\n" +
	"\x04file\x18\x02 \x01(\tR\x04file\x12\x12\n" +
	"\x04link\x18\x03 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\x04 \x01(\tR\x05email\x12\x1e\n" +
	"\n" +
	"repository\x18\x05 \x01(\tR\n" +
	"repository\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\tR\ttimestamp\x12\x12\n" +
	"\x04line\x18\a \x01(\x03R\x04line\x12\x1d\n" +
	"\n" +
	"project_id\x18\b \x01(\x03R\tprojectId\x12!\n" +
	"\fproject_name\x18\t \x01(\tR\vprojectName\x12#\n" +
	"\rproject_owner\x18\n" +
	" \x01(\tR\fprojectOwner\"\xd8\x01\n" +
	"\x03GCS\x12\x16\n" +
	"\x06bucket\x18\x01 \x01(\tR\x06bucket\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x12\n" +
	"\x04link\x18\x03 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\x04 \x01(\tR\x05email\x12\x1d\n" +
	"\n" +
	"created_at\x18\x05 \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x06 \x01(\tR\tupdatedAt\x12\x12\n" +
	"\x04acls\x18\a \x03(\tR\x04acls\x12!\n" +
	"\fcontent_type\x18\b \x01(\tR\vcontentType\"\xb3\x02\n" +
	"\vHuggingface\x12\x12\n" +
	"\x04link\x18\x01 \x01(\tR\x04link\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1e\n" +
	"\n" +
	"repository\x18\x03 \x01(\tR\n" +
	"repository\x12\x16\n" +
	"\x06commit\x18\x04 \x01(\tR\x06commit\x12\x14\n" +
	"\x05email\x18\x05 \x01(\tR\x05email\x12\x12\n" +
	"\x04file\x18\x06 \x01(\tR\x04file\x12\x1c\n" +
	"\ttimestamp\x18\a \x01(\tR\ttimestamp\x12\x12\n" +
	"\x04line\x18\b \x01(\x03R\x04line\x12;\n" +
	"\n" +
	"visibility\x18\t \x01(\x0e2\x1b.source_metadata.VisibilityR\n" +
	"visibility\x12#\n" +
	"\rresource_type\x18\n" +
	" \x01(\tR\fresourceType\"\x98\x01\n" +
	"\x04Jira\x12\x14\n" +
	"\x05issue\x18\x01 \x01(\tR\x05issue\x12\x16\n" +
	"\x06author\x18\x02 \x01(\tR\x06author\x12\x12\n" +
	"\x04link\x18\x03 \x01(\tR\x04link\x12\x1a\n" +
	"\blocation\x18\x04 \x01(\tR\blocation\x12\x14\n" +
	"\x05email\x18\x05 \x01(\tR\x05email\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\tR\ttimestamp\"w\n" +
	"\x03NPM\x12\x12\n" +
	"\x04file\x18\x01 \x01(\tR\x04file\x12\x18\n" +
	"\apackage\x18\x02 \x01(\tR\apackage\x12\x18\n" +
	"\arelease\x18\x03 \x01(\tR\arelease\x12\x12\n" +
	"\x04link\x18\x04 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\x05 \x01(\tR\x05email\"x\n" +
	"\x04PyPi\x12\x12\n" +
	"\x04file\x18\x01 \x01(\tR\x04file\x12\x18\n" +
	"\apackage\x18\x02 \x01(\tR\apackage\x12\x18\n" +
	"\arelease\x18\x03 \x01(\tR\arelease\x12\x12\n" +
	"\x04link\x18\x04 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\x05 \x01(\tR\x05email\"x\n" +
	"\x02S3\x12\x16\n" +
	"\x06bucket\x18\x01 \x01(\tR\x06bucket\x12\x12\n" +
	"\x04file\x18\x02 \x01(\tR\x04file\x12\x12\n" +
	"\x04link\x18\x03 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\x05 \x01(\tR\x05email\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\tR\ttimestamp\"\x97\x02\n" +
	"\x05Slack\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tR\tchannelId\x12!\n" +
	"\fchannel_name\x18\x02 \x01(\tR\vchannelName\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\tR\ttimestamp\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12\x12\n" +
	"\x04link\x18\x05 \x01(\tR\x04link\x12\x12\n" +
	"\x04file\x18\x06 \x01(\tR\x04file\x12\x14\n" +
	"\x05email\x18\a \x01(\tR\x05email\x12;\n" +
	"\n" +
	"visibility\x18\b \x01(\x0e2\x1b.source_metadata.VisibilityR\n" +
	"visibility\x12\x1a\n" +
	"\blocation\x18\t \x01(\tR\blocation\"\x96\x01\n" +
	"\x06Gerrit\x12\x16\n" +
	"\x06commit\x18\x01 \x01(\tR\x06commit\x12\x12\n" +
	"\x04file\x18\x02 \x01(\tR\x04file\x12\x14\n" +
	"\x05email\x18\x03 \x01(\tR\x05email\x12\x18\n" +
	"\aproject\x18\x04 \x01(\tR\aproject\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\tR\ttimestamp\x12\x12\n" +
	"\x04line\x18\x06 \x01(\x03R\x04line\"\x1a\n" +
	"\x04Test\x12\x12\n" +
	"\x04file\x18\x01 \x01(\tR\x04file\"\x81\x01\n" +
	"\aJenkins\x12!\n" +
	"\fproject_name\x18\x01 \x01(\tR\vprojectName\x12!\n" +
	"\fbuild_number\x18\x02 \x01(\x03R\vbuildNumber\x12\x12\n" +
	"\x04link\x18\x03 \x01(\tR\x04link\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\tR\ttimestamp\"\x90\x02\n" +
	"\x05Teams\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tR\tchannelId\x12!\n" +
	"\fchannel_name\x18\x02 \x01(\tR\vchannelName\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\tR\ttimestamp\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12\x12\n" +
	"\x04link\x18\x05 \x01(\tR\x04link\x12\x12\n" +
	"\x04file\x18\x06 \x01(\tR\x04file\x12\x14\n" +
	"\x05email\x18\a \x01(\tR\x05email\x12\x1a\n" +
	"\blocation\x18\b \x01(\tR\blocation\x12\x1b\n" +
	"\tteam_name\x18\t \x01(\tR\bteamName\x12\x17\n" +
	"\ateam_id\x18\n" +
	" \x01(\tR\x06teamId\"\x99\x01\n" +
	"\vArtifactory\x12\x12\n" +
	"\x04repo\x18\x01 \x01(\tR\x04repo\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x12\n" +
	"\x04link\x18\x03 \x01(\tR\x04link\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\tR\ttimestamp\x12\x1a\n" +
	"\busername\x18\x05 \x01(\tR\busername\x12\x14\n" +
	"\x05email\x18\x06 \x01(\tR\x05email\"\xa8\x01\n" +
	"\x06Syslog\x12\x1a\n" +
	"\bhostname\x18\x01 \x01(\tR\bhostname\x12\x18\n" +
	"\aappname\x18\x02 \x01(\tR\aappname\x12\x16\n" +
	"\x06procid\x18\x03 \x01(\tR\x06procid\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\tR\ttimestamp\x12\x16\n" +
	"\x06client\x18\x05 \x01(\tR\x06client\x12\x1a\n" +
	"\bfacility\x18\x06 \x01(\tR\bfacility\"\x9f\x01\n" +
	"\aForager\x121\n" +
	"\x06github\x18\x01 \x01(\v2\x17.source_metadata.GithubH\x00R\x06github\x12(\n" +
	"\x03npm\x18\x02 \x01(\v2\x14.source_metadata.NPMH\x00R\x03npm\x12+\n" +
	"\x04pypi\x18\x03 \x01(\v2\x15.source_metadata.PyPiH\x00R\x04pypiB\n" +
	"\n" +
	"\bmetadata\"\xae\x01\n" +
	"\n" +
	"SharePoint\x12\x12\n" +
	"\x04link\x18\x01 \x01(\tR\x04link\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\tR\ttimestamp\x12\x16\n" +
	"\x06author\x18\x03 \x01(\tR\x06author\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12\x14\n" +
	"\x05views\x18\x05 \x01(\x03R\x05views\x12\x14\n" +
	"\x05docid\x18\x06 \x01(\tR\x05docid\x12\x14\n" +
	"\x05email\x18\a \x01(\tR\x05email\"\xbf\x01\n" +
	"\vGoogleDrive\x12\x12\n" +
	"\x04file\x18\x01 \x01(\tR\x04file\x12\x12\n" +
	"\x04link\x18\x02 \x01(\tR\x04link\x12\x14\n" +
	"\x05email\x18\x03 \x01(\tR\x05email\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\tR\ttimestamp\x12\x16\n" +
	"\x06shared\x18\x05 \x01(\bR\x06shared\x12(\n" +
	"\x10last_modified_by\x18\x06 \x01(\tR\x0elastModifiedBy\x12\x12\n" +
	"\x04path\x18\a \x01(\tR\x04path\"\xcb\x02\n" +
	"\n" +
	"AzureRepos\x12\x12\n" +
	"\x04link\x18\x01 \x01(\tR\x04link\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1e\n" +
	"\n" +
	"repository\x18\x03 \x01(\tR\n" +
	"repository\x12\x16\n" +
	"\x06commit\x18\x04 \x01(\tR\x06commit\x12\x14\n" +
	"\x05email\x18\x05 \x01(\tR\x05email\x12\x12\n" +
	"\x04file\x18\x06 \x01(\tR\x04file\x12\x1c\n" +
	"\ttimestamp\x18\a \x01(\tR\ttimestamp\x12\x12\n" +
	"\x04line\x18\b \x01(\x03R\x04line\x12;\n" +
	"\n" +
	"visibility\x18\t \x01(\x0e2\x1b.source_metadata.VisibilityR\n" +
	"visibility\x12\x18\n" +
	"\aproject\x18\n" +
	" \x01(\tR\aproject\x12\"\n" +
	"\forganization\x18\v \x01(\tR\forganization\"\xae\x04\n" +
	"\aPostman\x12\x12\n" +
	"\x04link\x18\x01 \x01(\tR\x04link\x12%\n" +
	"\x0eworkspace_uuid\x18\x02 \x01(\tR\rworkspaceUuid\x12%\n" +
	"\x0eworkspace_name\x18\x03 \x01(\tR\rworkspaceName\x12#\n" +
	"\rcollection_id\x18\x05 \x01(\tR\fcollectionId\x12'\n" +
	"\x0fcollection_name\x18\x06 \x01(\tR\x0ecollectionName\x12%\n" +
	"\x0eenvironment_id\x18\a \x01(\tR\renvironmentId\x12)\n" +
	"\x10environment_name\x18\b \x01(\tR\x0fenvironmentName\x12\x1d\n" +
	"\n" +
	"request_id\x18\t \x01(\tR\trequestId\x12!\n" +
	"\frequest_name\x18\n" +
	" \x01(\tR\vrequestName\x12\x1b\n" +
	"\tfolder_id\x18\v \x01(\tR\bfolderId\x12\x1f\n" +
	"\vfolder_name\x18\f \x01(\tR\n" +
	"folderName\x12\x1d\n" +
	"\n" +
	"field_type\x18\r \x01(\tR\tfieldType\x12I\n" +
	"\rlocation_type\x18\x10 \x01(\x0e2$.source_metadata.PostmanLocationTypeR\flocationTypeJ\x04\b\x04\x10\x05J\x04\b\x0e\x10\x0fJ\x04\b\x0f\x10\x10R\n" +
	"globals_idR\n" +
	"field_nameR\rvariable_type\"\xa5\x01\n" +
	"\x06Vector\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1f\n" +
	"\vsource_type\x18\x02 \x01(\tR\n" +
	"sourceType\x12\x12\n" +
	"\x04host\x18\x03 \x01(\tR\x04host\x12\x18\n" +
	"\alocator\x18\x04 \x01(\tR\alocator\x12\x12\n" +
	"\x04link\x18\x05 \x01(\tR\x04link\"D\n" +
	"\aWebhook\x121\n" +
	"\x06vector\x18\x01 \x01(\v2\x17.source_metadata.VectorH\x00R\x06vectorB\x06\n" +
	"\x04data\"d\n" +
	"\rElasticsearch\x12\x14\n" +
	"\x05index\x18\x01 \x01(\tR\x05index\x12\x1f\n" +
	"\vdocument_id\x18\x02 \x01(\tR\n" +
	"documentId\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\tR\ttimestamp\"\xc9\x02\n" +
	"\x06Sentry\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12'\n" +
	"\x0forganization_id\x18\x02 \x01(\tR\x0eorganizationId\x12+\n" +
	"\x11organization_slug\x18\x03 \x01(\tR\x10organizationSlug\x12:\n" +
	"\x19organization_date_created\x18\x04 \x01(\tR\x17organizationDateCreated\x12\x1d\n" +
	"\n" +
	"project_id\x18\x05 \x01(\tR\tprojectId\x12!\n" +
	"\fproject_slug\x18\x06 \x01(\tR\vprojectSlug\x12\x19\n" +
	"\bissue_id\x18\a \x01(\tR\aissueId\x12!\n" +
	"\fdate_created\x18\b \x01(\tR\vdateCreated\x12\x12\n" +
	"\x04link\x18\t \x01(\tR\x04link\"\a\n" +
	"\x05Stdin\"\x8d\x02\n" +
	"\x0fSlackContinuous\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tR\tchannelId\x12!\n" +
	"\fchannel_name\x18\x02 \x01(\tR\vchannelName\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\tR\ttimestamp\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12\x12\n" +
	"\x04file\x18\x05 \x01(\tR\x04file\x12\x14\n" +
	"\x05email\x18\x06 \x01(\tR\x05email\x12;\n" +
	"\n" +
	"visibility\x18\a \x01(\x0e2\x1b.source_metadata.VisibilityR\n" +
	"visibility\x12\x1a\n" +
	"\blocation\x18\b \x01(\tR\blocation\"\xf4\x0e\n" +
	"\bMetaData\x12.\n" +
	"\x05azure\x18\x01 \x01(\v2\x16.source_metadata.AzureH\x00R\x05azure\x12:\n" +
	"\tbitbucket\x18\x02 \x01(\v2\x1a.source_metadata.BitbucketH\x00R\tbitbucket\x127\n" +
	"\bcircleci\x18\x03 \x01(\v2\x19.source_metadata.CircleCIH\x00R\bcircleci\x12=\n" +
	"\n" +
	"confluence\x18\x04 \x01(\v2\x1b.source_metadata.ConfluenceH\x00R\n" +
	"confluence\x121\n" +
	"\x06docker\x18\x05 \x01(\v2\x17.source_metadata.DockerH\x00R\x06docker\x12(\n" +
	"\x03ecr\x18\x06 \x01(\v2\x14.source_metadata.ECRH\x00R\x03ecr\x12(\n" +
	"\x03gcs\x18\a \x01(\v2\x14.source_metadata.GCSH\x00R\x03gcs\x121\n" +
	"\x06github\x18\b \x01(\v2\x17.source_metadata.GithubH\x00R\x06github\x121\n" +
	"\x06gitlab\x18\t \x01(\v2\x17.source_metadata.GitlabH\x00R\x06gitlab\x12+\n" +
	"\x04jira\x18\n" +
	" \x01(\v2\x15.source_metadata.JiraH\x00R\x04jira\x12(\n" +
	"\x03npm\x18\v \x01(\v2\x14.source_metadata.NPMH\x00R\x03npm\x12+\n" +
	"\x04pypi\x18\f \x01(\v2\x15.source_metadata.PyPiH\x00R\x04pypi\x12%\n" +
	"\x02s3\x18\r \x01(\v2\x13.source_metadata.S3H\x00R\x02s3\x12.\n" +
	"\x05slack\x18\x0e \x01(\v2\x16.source_metadata.SlackH\x00R\x05slack\x12=\n" +
	"\n" +
	"filesystem\x18\x0f \x01(\v2\x1b.source_metadata.FilesystemH\x00R\n" +
	"filesystem\x12(\n" +
	"\x03git\x18\x10 \x01(\v2\x14.source_metadata.GitH\x00R\x03git\x12+\n" +
	"\x04test\x18\x11 \x01(\v2\x15.source_metadata.TestH\x00R\x04test\x12:\n" +
	"\tbuildkite\x18\x12 \x01(\v2\x1a.source_metadata.BuildkiteH\x00R\tbuildkite\x121\n" +
	"\x06gerrit\x18\x13 \x01(\v2\x17.source_metadata.GerritH\x00R\x06gerrit\x124\n" +
	"\ajenkins\x18\x14 \x01(\v2\x18.source_metadata.JenkinsH\x00R\ajenkins\x12.\n" +
	"\x05teams\x18\x15 \x01(\v2\x16.source_metadata.TeamsH\x00R\x05teams\x12@\n" +
	"\vartifactory\x18\x16 \x01(\v2\x1c.source_metadata.ArtifactoryH\x00R\vartifactory\x121\n" +
	"\x06syslog\x18\x17 \x01(\v2\x17.source_metadata.SyslogH\x00R\x06syslog\x124\n" +
	"\aforager\x18\x18 \x01(\v2\x18.source_metadata.ForagerH\x00R\aforager\x12=\n" +
	"\n" +
	"sharepoint\x18\x19 \x01(\v2\x1b.source_metadata.SharePointH\x00R\n" +
	"sharepoint\x12@\n" +
	"\vgoogleDrive\x18\x1a \x01(\v2\x1c.source_metadata.GoogleDriveH\x00R\vgoogleDrive\x12=\n" +
	"\n" +
	"azureRepos\x18\x1b \x01(\v2\x1b.source_metadata.AzureReposH\x00R\n" +
	"azureRepos\x127\n" +
	"\btravisCI\x18\x1c \x01(\v2\x19.source_metadata.TravisCIH\x00R\btravisCI\x124\n" +
	"\apostman\x18\x1d \x01(\v2\x18.source_metadata.PostmanH\x00R\apostman\x124\n" +
	"\awebhook\x18\x1e \x01(\v2\x18.source_metadata.WebhookH\x00R\awebhook\x12F\n" +
	"\relasticsearch\x18\x1f \x01(\v2\x1e.source_metadata.ElasticsearchH\x00R\relasticsearch\x12@\n" +
	"\vhuggingface\x18  \x01(\v2\x1c.source_metadata.HuggingfaceH\x00R\vhuggingface\x121\n" +
	"\x06sentry\x18! \x01(\v2\x17.source_metadata.SentryH\x00R\x06sentry\x12.\n" +
	"\x05stdin\x18\" \x01(\v2\x16.source_metadata.StdinH\x00R\x05stdin\x12L\n" +
	"\x0fslackContinuous\x18# \x01(\v2 .source_metadata.SlackContinuousH\x00R\x0fslackContinuousB\x06\n" +
	"\x04data*>\n" +
	"\n" +
	"Visibility\x12\n" +
	"\n" +
	"\x06public\x10\x00\x12\v\n" +
	"\aprivate\x10\x01\x12\n" +
	"\n" +
	"\x06shared\x10\x02\x12\v\n" +
	"\aunknown\x10\x03*\xc2\x03\n" +
	"\x13PostmanLocationType\x12\x13\n" +
	"\x0fUNKNOWN_POSTMAN\x10\x00\x12\x1b\n" +
	"\x17REQUEST_QUERY_PARAMETER\x10\x01\x12\x19\n" +
	"\x15REQUEST_AUTHORIZATION\x10\x02\x12\x12\n" +
	"\x0eREQUEST_HEADER\x10\x03\x12\x1a\n" +
	"\x16REQUEST_BODY_FORM_DATA\x10\x04\x12\x14\n" +
	"\x10REQUEST_BODY_RAW\x10\x05\x12\x1c\n" +
	"\x18REQUEST_BODY_URL_ENCODED\x10\x06\x12\x18\n" +
	"\x14REQUEST_BODY_GRAPHQL\x10\a\x12\x12\n" +
	"\x0eREQUEST_SCRIPT\x10\b\x12\x0f\n" +
	"\vREQUEST_URL\x10\t\x12\x18\n" +
	"\x14ENVIRONMENT_VARIABLE\x10\n" +
	"\x12\x18\n" +
	"\x14FOLDER_AUTHORIZATION\x10\v\x12\x11\n" +
	"\rFOLDER_SCRIPT\x10\f\x12\x15\n" +
	"\x11COLLECTION_SCRIPT\x10\r\x12\x17\n" +
	"\x13COLLECTION_VARIABLE\x10\x0e\x12\x1c\n" +
	"\x18COLLECTION_AUTHORIZATION\x10\x0f\x12\x11\n" +
	"\rRESPONSE_BODY\x10\x10\x12\x13\n" +
	"\x0fRESPONSE_HEADER\x10\x11BCZAgithub.com/trufflesecurity/trufflehog/v3/pkg/pb/source_metadatapbb\x06proto3"

var (
	file_source_metadata_proto_rawDescOnce sync.Once
	file_source_metadata_proto_rawDescData []byte
)

func file_source_metadata_proto_rawDescGZIP() []byte {
	file_source_metadata_proto_rawDescOnce.Do(func() {
		file_source_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_source_metadata_proto_rawDesc), len(file_source_metadata_proto_rawDesc)))
	})
	return file_source_metadata_proto_rawDescData
}

var file_source_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_source_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_source_metadata_proto_goTypes = []any{
	(Visibility)(0),               // 0: source_metadata.Visibility
	(PostmanLocationType)(0),      // 1: source_metadata.PostmanLocationType
	(*Azure)(nil),                 // 2: source_metadata.Azure
	(*Bitbucket)(nil),             // 3: source_metadata.Bitbucket
	(*Buildkite)(nil),             // 4: source_metadata.Buildkite
	(*CircleCI)(nil),              // 5: source_metadata.CircleCI
	(*TravisCI)(nil),              // 6: source_metadata.TravisCI
	(*Confluence)(nil),            // 7: source_metadata.Confluence
	(*Docker)(nil),                // 8: source_metadata.Docker
	(*ECR)(nil),                   // 9: source_metadata.ECR
	(*Filesystem)(nil),            // 10: source_metadata.Filesystem
	(*Git)(nil),                   // 11: source_metadata.Git
	(*Github)(nil),                // 12: source_metadata.Github
	(*Gitlab)(nil),                // 13: source_metadata.Gitlab
	(*GCS)(nil),                   // 14: source_metadata.GCS
	(*Huggingface)(nil),           // 15: source_metadata.Huggingface
	(*Jira)(nil),                  // 16: source_metadata.Jira
	(*NPM)(nil),                   // 17: source_metadata.NPM
	(*PyPi)(nil),                  // 18: source_metadata.PyPi
	(*S3)(nil),                    // 19: source_metadata.S3
	(*Slack)(nil),                 // 20: source_metadata.Slack
	(*Gerrit)(nil),                // 21: source_metadata.Gerrit
	(*Test)(nil),                  // 22: source_metadata.Test
	(*Jenkins)(nil),               // 23: source_metadata.Jenkins
	(*Teams)(nil),                 // 24: source_metadata.Teams
	(*Artifactory)(nil),           // 25: source_metadata.Artifactory
	(*Syslog)(nil),                // 26: source_metadata.Syslog
	(*Forager)(nil),               // 27: source_metadata.Forager
	(*SharePoint)(nil),            // 28: source_metadata.SharePoint
	(*GoogleDrive)(nil),           // 29: source_metadata.GoogleDrive
	(*AzureRepos)(nil),            // 30: source_metadata.AzureRepos
	(*Postman)(nil),               // 31: source_metadata.Postman
	(*Vector)(nil),                // 32: source_metadata.Vector
	(*Webhook)(nil),               // 33: source_metadata.Webhook
	(*Elasticsearch)(nil),         // 34: source_metadata.Elasticsearch
	(*Sentry)(nil),                // 35: source_metadata.Sentry
	(*Stdin)(nil),                 // 36: source_metadata.Stdin
	(*SlackContinuous)(nil),       // 37: source_metadata.SlackContinuous
	(*MetaData)(nil),              // 38: source_metadata.MetaData
	(*timestamppb.Timestamp)(nil), // 39: google.protobuf.Timestamp
}
var file_source_metadata_proto_depIdxs = []int32{
	0,  // 0: source_metadata.Github.visibility:type_name -> source_metadata.Visibility
	0,  // 1: source_metadata.Huggingface.visibility:type_name -> source_metadata.Visibility
	0,  // 2: source_metadata.Slack.visibility:type_name -> source_metadata.Visibility
	12, // 3: source_metadata.Forager.github:type_name -> source_metadata.Github
	17, // 4: source_metadata.Forager.npm:type_name -> source_metadata.NPM
	18, // 5: source_metadata.Forager.pypi:type_name -> source_metadata.PyPi
	0,  // 6: source_metadata.AzureRepos.visibility:type_name -> source_metadata.Visibility
	1,  // 7: source_metadata.Postman.location_type:type_name -> source_metadata.PostmanLocationType
	39, // 8: source_metadata.Vector.timestamp:type_name -> google.protobuf.Timestamp
	32, // 9: source_metadata.Webhook.vector:type_name -> source_metadata.Vector
	0,  // 10: source_metadata.SlackContinuous.visibility:type_name -> source_metadata.Visibility
	2,  // 11: source_metadata.MetaData.azure:type_name -> source_metadata.Azure
	3,  // 12: source_metadata.MetaData.bitbucket:type_name -> source_metadata.Bitbucket
	5,  // 13: source_metadata.MetaData.circleci:type_name -> source_metadata.CircleCI
	7,  // 14: source_metadata.MetaData.confluence:type_name -> source_metadata.Confluence
	8,  // 15: source_metadata.MetaData.docker:type_name -> source_metadata.Docker
	9,  // 16: source_metadata.MetaData.ecr:type_name -> source_metadata.ECR
	14, // 17: source_metadata.MetaData.gcs:type_name -> source_metadata.GCS
	12, // 18: source_metadata.MetaData.github:type_name -> source_metadata.Github
	13, // 19: source_metadata.MetaData.gitlab:type_name -> source_metadata.Gitlab
	16, // 20: source_metadata.MetaData.jira:type_name -> source_metadata.Jira
	17, // 21: source_metadata.MetaData.npm:type_name -> source_metadata.NPM
	18, // 22: source_metadata.MetaData.pypi:type_name -> source_metadata.PyPi
	19, // 23: source_metadata.MetaData.s3:type_name -> source_metadata.S3
	20, // 24: source_metadata.MetaData.slack:type_name -> source_metadata.Slack
	10, // 25: source_metadata.MetaData.filesystem:type_name -> source_metadata.Filesystem
	11, // 26: source_metadata.MetaData.git:type_name -> source_metadata.Git
	22, // 27: source_metadata.MetaData.test:type_name -> source_metadata.Test
	4,  // 28: source_metadata.MetaData.buildkite:type_name -> source_metadata.Buildkite
	21, // 29: source_metadata.MetaData.gerrit:type_name -> source_metadata.Gerrit
	23, // 30: source_metadata.MetaData.jenkins:type_name -> source_metadata.Jenkins
	24, // 31: source_metadata.MetaData.teams:type_name -> source_metadata.Teams
	25, // 32: source_metadata.MetaData.artifactory:type_name -> source_metadata.Artifactory
	26, // 33: source_metadata.MetaData.syslog:type_name -> source_metadata.Syslog
	27, // 34: source_metadata.MetaData.forager:type_name -> source_metadata.Forager
	28, // 35: source_metadata.MetaData.sharepoint:type_name -> source_metadata.SharePoint
	29, // 36: source_metadata.MetaData.googleDrive:type_name -> source_metadata.GoogleDrive
	30, // 37: source_metadata.MetaData.azureRepos:type_name -> source_metadata.AzureRepos
	6,  // 38: source_metadata.MetaData.travisCI:type_name -> source_metadata.TravisCI
	31, // 39: source_metadata.MetaData.postman:type_name -> source_metadata.Postman
	33, // 40: source_metadata.MetaData.webhook:type_name -> source_metadata.Webhook
	34, // 41: source_metadata.MetaData.elasticsearch:type_name -> source_metadata.Elasticsearch
	15, // 42: source_metadata.MetaData.huggingface:type_name -> source_metadata.Huggingface
	35, // 43: source_metadata.MetaData.sentry:type_name -> source_metadata.Sentry
	36, // 44: source_metadata.MetaData.stdin:type_name -> source_metadata.Stdin
	37, // 45: source_metadata.MetaData.slackContinuous:type_name -> source_metadata.SlackContinuous
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_source_metadata_proto_init() }
func file_source_metadata_proto_init() {
	if File_source_metadata_proto != nil {
		return
	}
	file_source_metadata_proto_msgTypes[25].OneofWrappers = []any{
		(*Forager_Github)(nil),
		(*Forager_Npm)(nil),
		(*Forager_Pypi)(nil),
	}
	file_source_metadata_proto_msgTypes[31].OneofWrappers = []any{
		(*Webhook_Vector)(nil),
	}
	file_source_metadata_proto_msgTypes[36].OneofWrappers = []any{
		(*MetaData_Azure)(nil),
		(*MetaData_Bitbucket)(nil),
		(*MetaData_Circleci)(nil),
		(*MetaData_Confluence)(nil),
		(*MetaData_Docker)(nil),
		(*MetaData_Ecr)(nil),
		(*MetaData_Gcs)(nil),
		(*MetaData_Github)(nil),
		(*MetaData_Gitlab)(nil),
		(*MetaData_Jira)(nil),
		(*MetaData_Npm)(nil),
		(*MetaData_Pypi)(nil),
		(*MetaData_S3)(nil),
		(*MetaData_Slack)(nil),
		(*MetaData_Filesystem)(nil),
		(*MetaData_Git)(nil),
		(*MetaData_Test)(nil),
		(*MetaData_Buildkite)(nil),
		(*MetaData_Gerrit)(nil),
		(*MetaData_Jenkins)(nil),
		(*MetaData_Teams)(nil),
		(*MetaData_Artifactory)(nil),
		(*MetaData_Syslog)(nil),
		(*MetaData_Forager)(nil),
		(*MetaData_Sharepoint)(nil),
		(*MetaData_GoogleDrive)(nil),
		(*MetaData_AzureRepos)(nil),
		(*MetaData_TravisCI)(nil),
		(*MetaData_Postman)(nil),
		(*MetaData_Webhook)(nil),
		(*MetaData_Elasticsearch)(nil),
		(*MetaData_Huggingface)(nil),
		(*MetaData_Sentry)(nil),
		(*MetaData_Stdin)(nil),
		(*MetaData_SlackContinuous)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_source_metadata_proto_rawDesc), len(file_source_metadata_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_source_metadata_proto_goTypes,
		DependencyIndexes: file_source_metadata_proto_depIdxs,
		EnumInfos:         file_source_metadata_proto_enumTypes,
		MessageInfos:      file_source_metadata_proto_msgTypes,
	}.Build()
	File_source_metadata_proto = out.File
	file_source_metadata_proto_goTypes = nil
	file_source_metadata_proto_depIdxs = nil
}
