package teleriklicensekey

import (
	"context"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/stretchr/testify/require"

	"github.com/trufflesecurity/trufflehog/v3/pkg/detectors"
	"github.com/trufflesecurity/trufflehog/v3/pkg/engine/ahocorasick"
)

func TestTeleriklicensekey_Pattern(t *testing.T) {
	d := Scanner{}
	ahoCorasickCore := ahocorasick.NewAhoCorasickCore([]detectors.Detector{d})
	tests := []struct {
		name  string
		input string
		want  []string
	}{
		{
			name: "valid pattern",
			input: `
				[INFO] Sending request to the teleriklicensekey API
				[DEBUG] Using Key=eyJhbGciOiJSUzI1NiIsInR5cCI6IlRlbGVyaWsgTGljZW5zZSBLZXkifQ.eyJ0eXBlIjoidGVsZXJpay1saWNlbnNlIiwibGljZW5zZUlkIjoiMTFjZjM1NTYtYTYxMS00MmVjLTkxZGYtMTZmMDdmMzAwZmJjIiwidXNlcklkIjoiYWFhYWFhYWEtYmJiYi1jY2NjLWRkZGQtZWVlZWVlZWVlZWVlIiwiaWF0IjoxNzU5MTU0OTMxLCJsaWNlbnNlcyI6WyJleUpoYkdjaU9pSlNVekkxTmlJc0luUjVjQ0k2SWxSbGJHVnlhV3NnVEdsalpXNXpaU0JGZG1sa1pXNWpaU0o5LmV5SmpiMlJsSWpvaVZVbEJVMUJEVDFKRklpd2lkSGx3WlNJNkluTjFZbk5qY21sd2RHbHZiaUlzSW1WNGNHbHlZWFJwYjI0aU9qRTNOakUzTkRZNU16QXNJblZ6WlhKSlpDSTZJbUZoWVdGaFlXRmhMV0ppWW1JdFkyTmpZeTFrWkdSa0xXVmxaV1ZsWldWbFpXVmxaU0lzSW14cFkyVnVjMlZKWkNJNklqRXhZMll6TlRVMkxXRTJNVEV0TkRKbFl5MDVNV1JtTFRFMlpqQTNaak13TUdaaVl5SjkuMWtfTmhXSk9Na0s1amZ3WGh4OVZYdHVFbl9URjJsemJxbGFyWk5ZMU03eXo3X2c3blFEVlE1TzgzSmJaZ0hjRDdZQjREdDQzQndPNjVlYm03dWdaRUR2U3l1M2NnSkJtWndncUpHeXNNN3ZhYkNoVUxLX0Jqb01DVG1NY25FRzdKQ0h0N0R6U3JPb1VmckNESUhyZ1VXTWFPcWtGeFVYeWFKUUtLcTFhZDdNTVAtV05pYTdEbGVLVTRkQ2pKcU1EX21pd1pkTEVZRVphZXNBdFZsYXp5MHM1VU05YzgyM3BDOFZKU3NkTWhVcXMzU3M2aXFqWFB2RFRXejZ3aUZJdm9IVUxJLXYwRFBDN0kwUjQ3czlWQ3ZiZGl0QW9JWUNWRHJBa0dneFNwSHpmc0Zoa0J2NnZJcFVvLTQydXQyNWxKMFJEQXF4bFpWVHN4d3JMWTY2S2N3IiwiZXlKaGJHY2lPaUpTVXpJMU5pSXNJblI1Y0NJNklsUmxiR1Z5YVdzZ1RHbGpaVzV6WlNCRmRtbGtaVzVqWlNKOS5leUowZVhCbElqb2lkWE5oWjJVaUxDSjFjMlZ5U1dRaU9pSmhZV0ZoWVdGaFlTMWlZbUppTFdOalkyTXRaR1JrWkMxbFpXVmxaV1ZsWldWbFpXVWlMQ0pzYVdObGJuTmxTV1FpT2lJeE1XTm1NelUxTmkxaE5qRXhMVFF5WldNdE9URmtaaTB4Tm1Zd04yWXpNREJtWW1NaUxDSnBjMGx1ZEdWeWJtRnNWWE5oWjJVaU9uUnlkV1Y5LkxtMVY0eHFJWUlIalRHbU94ZUkyd2x2dDFrVEMyZ01McE5UQ1pvYTZIbTdxdXJwZ0M3c1BVMFgxODd3eURYNmEwX0tvNnFOUGJTWlotNjJFdGNHNEwtLUE5MTZscEdtckRIS0Y4LXotRWJjMGVDSG9NM2U4R2ItVjF3c0pucGQ1LUhFYU0yYjZhR2JJTC1HTHllLVVraUVubEZVN2ZuNFktcEFSUVNBTVpKWTRqdnlMYS11OTloRzRKOGxHUGw4NTVUMEt3ci16dkRRUEZzQnB2eVhtMFV6Xy10THRSeHB3OTU0THl4WXNhR1l2RkVEZE1NQU5hWHN0UnFFNmRlNW9EWEJ2aEdIbXluaG9UUXREMHdTdlhKSXVhcms2bk1TWm52Q0JlUEllY2Z4dVNLMmMwNFdLa1FLMkNHMGxFOEE4S3hjSDJHUE9RS0IyU2JEOGN6ci1EQSJdLCJwcm9kdWN0cyI6W10sImF1ZCI6InUqKioubioqKkB0KioqKioqLnRlc3QiLCJsaWNlbnNlSG9sZGVyIjoidSoqKi5uKioqQHQqKioqKioudGVzdCIsImludGVncml0eSI6ImJqSHgvbUZSREloK1hsdWpJbUViM01ic2hKMWlsRzRSWDJEYlM1ZFJnaW89In0.ducvbQWc9JODoG9DFVMerhvuM2EsmsZRG-A8zhNzznJbIgxMAPeev0hcBIEYcSvPgmmAmjRBR1R_luBnl5sOMmP4h4BV0Mc5PY4prrOVEEDyabaKaiMtIUTJApG4gKOkOTZPiuP6DPJVMfy31YcLv0ldKfMJ004IAH1_cOjLVPDyEXlEb6RZv02xtho0Wgo5z6NtylVXO3JDv5F1v4vGibdPf3EY3blpzIVqEvm8NtWBHv44CbDUi8-nYzBf4ZDIg3kvJdOphW9KqHq6Kg7fT8jw5bTV-Lln438y-LMJWMS-agKkEFEJufi7nJjBnCSMasqKgbUQMyG8mFG8j79pOw
				[INFO] Response received: 200 OK
			`,
			want: []string{"eyJhbGciOiJSUzI1NiIsInR5cCI6IlRlbGVyaWsgTGljZW5zZSBLZXkifQ.eyJ0eXBlIjoidGVsZXJpay1saWNlbnNlIiwibGljZW5zZUlkIjoiMTFjZjM1NTYtYTYxMS00MmVjLTkxZGYtMTZmMDdmMzAwZmJjIiwidXNlcklkIjoiYWFhYWFhYWEtYmJiYi1jY2NjLWRkZGQtZWVlZWVlZWVlZWVlIiwiaWF0IjoxNzU5MTU0OTMxLCJsaWNlbnNlcyI6WyJleUpoYkdjaU9pSlNVekkxTmlJc0luUjVjQ0k2SWxSbGJHVnlhV3NnVEdsalpXNXpaU0JGZG1sa1pXNWpaU0o5LmV5SmpiMlJsSWpvaVZVbEJVMUJEVDFKRklpd2lkSGx3WlNJNkluTjFZbk5qY21sd2RHbHZiaUlzSW1WNGNHbHlZWFJwYjI0aU9qRTNOakUzTkRZNU16QXNJblZ6WlhKSlpDSTZJbUZoWVdGaFlXRmhMV0ppWW1JdFkyTmpZeTFrWkdSa0xXVmxaV1ZsWldWbFpXVmxaU0lzSW14cFkyVnVjMlZKWkNJNklqRXhZMll6TlRVMkxXRTJNVEV0TkRKbFl5MDVNV1JtTFRFMlpqQTNaak13TUdaaVl5SjkuMWtfTmhXSk9Na0s1amZ3WGh4OVZYdHVFbl9URjJsemJxbGFyWk5ZMU03eXo3X2c3blFEVlE1TzgzSmJaZ0hjRDdZQjREdDQzQndPNjVlYm03dWdaRUR2U3l1M2NnSkJtWndncUpHeXNNN3ZhYkNoVUxLX0Jqb01DVG1NY25FRzdKQ0h0N0R6U3JPb1VmckNESUhyZ1VXTWFPcWtGeFVYeWFKUUtLcTFhZDdNTVAtV05pYTdEbGVLVTRkQ2pKcU1EX21pd1pkTEVZRVphZXNBdFZsYXp5MHM1VU05YzgyM3BDOFZKU3NkTWhVcXMzU3M2aXFqWFB2RFRXejZ3aUZJdm9IVUxJLXYwRFBDN0kwUjQ3czlWQ3ZiZGl0QW9JWUNWRHJBa0dneFNwSHpmc0Zoa0J2NnZJcFVvLTQydXQyNWxKMFJEQXF4bFpWVHN4d3JMWTY2S2N3IiwiZXlKaGJHY2lPaUpTVXpJMU5pSXNJblI1Y0NJNklsUmxiR1Z5YVdzZ1RHbGpaVzV6WlNCRmRtbGtaVzVqWlNKOS5leUowZVhCbElqb2lkWE5oWjJVaUxDSjFjMlZ5U1dRaU9pSmhZV0ZoWVdGaFlTMWlZbUppTFdOalkyTXRaR1JrWkMxbFpXVmxaV1ZsWldWbFpXVWlMQ0pzYVdObGJuTmxTV1FpT2lJeE1XTm1NelUxTmkxaE5qRXhMVFF5WldNdE9URmtaaTB4Tm1Zd04yWXpNREJtWW1NaUxDSnBjMGx1ZEdWeWJtRnNWWE5oWjJVaU9uUnlkV1Y5LkxtMVY0eHFJWUlIalRHbU94ZUkyd2x2dDFrVEMyZ01McE5UQ1pvYTZIbTdxdXJwZ0M3c1BVMFgxODd3eURYNmEwX0tvNnFOUGJTWlotNjJFdGNHNEwtLUE5MTZscEdtckRIS0Y4LXotRWJjMGVDSG9NM2U4R2ItVjF3c0pucGQ1LUhFYU0yYjZhR2JJTC1HTHllLVVraUVubEZVN2ZuNFktcEFSUVNBTVpKWTRqdnlMYS11OTloRzRKOGxHUGw4NTVUMEt3ci16dkRRUEZzQnB2eVhtMFV6Xy10THRSeHB3OTU0THl4WXNhR1l2RkVEZE1NQU5hWHN0UnFFNmRlNW9EWEJ2aEdIbXluaG9UUXREMHdTdlhKSXVhcms2bk1TWm52Q0JlUEllY2Z4dVNLMmMwNFdLa1FLMkNHMGxFOEE4S3hjSDJHUE9RS0IyU2JEOGN6ci1EQSJdLCJwcm9kdWN0cyI6W10sImF1ZCI6InUqKioubioqKkB0KioqKioqLnRlc3QiLCJsaWNlbnNlSG9sZGVyIjoidSoqKi5uKioqQHQqKioqKioudGVzdCIsImludGVncml0eSI6ImJqSHgvbUZSREloK1hsdWpJbUViM01ic2hKMWlsRzRSWDJEYlM1ZFJnaW89In0.ducvbQWc9JODoG9DFVMerhvuM2EsmsZRG-A8zhNzznJbIgxMAPeev0hcBIEYcSvPgmmAmjRBR1R_luBnl5sOMmP4h4BV0Mc5PY4prrOVEEDyabaKaiMtIUTJApG4gKOkOTZPiuP6DPJVMfy31YcLv0ldKfMJ004IAH1_cOjLVPDyEXlEb6RZv02xtho0Wgo5z6NtylVXO3JDv5F1v4vGibdPf3EY3blpzIVqEvm8NtWBHv44CbDUi8-nYzBf4ZDIg3kvJdOphW9KqHq6Kg7fT8jw5bTV-Lln438y-LMJWMS-agKkEFEJufi7nJjBnCSMasqKgbUQMyG8mFG8j79pOw"},
		},
		{
			name: "finds all matches",
			input: `
				[INFO] Sending request to the teleriklicensekey API
				[DEBUG] Using Key=eyJhbGciOiJSUzI1NiIsInR5cCI6IlRlbGVyaWsgTGljZW5zZSBLZXkifQ.eyJ0eXBlIjoidGVsZXJpay1saWNlbnNlIiwibGljZW5zZUlkIjoiMTFjZjM1NTYtYTYxMS00MmVjLTkxZGYtMTZmMDdmMzAwZmJjIiwidXNlcklkIjoiYWFhYWFhYWEtYmJiYi1jY2NjLWRkZGQtZWVlZWVlZWVlZWVlIiwiaWF0IjoxNzU5MTU0OTMxLCJsaWNlbnNlcyI6WyJleUpoYkdjaU9pSlNVekkxTmlJc0luUjVjQ0k2SWxSbGJHVnlhV3NnVEdsalpXNXpaU0JGZG1sa1pXNWpaU0o5LmV5SmpiMlJsSWpvaVZVbEJVMUJEVDFKRklpd2lkSGx3WlNJNkluTjFZbk5qY21sd2RHbHZiaUlzSW1WNGNHbHlZWFJwYjI0aU9qRTNNamMyTVRnNU16QXNJblZ6WlhKSlpDSTZJbUZoWVdGaFlXRmhMV0ppWW1JdFkyTmpZeTFrWkdSa0xXVmxaV1ZsWldWbFpXVmxaU0lzSW14cFkyVnVjMlZKWkNJNklqRXhZMll6TlRVMkxXRTJNVEV0TkRKbFl5MDVNV1JtTFRFMlpqQTNaak13TUdaaVl5SjkudmJ0LXk1Q01iVUQ2M3hjWnlPV25wSExQUURiSFlRMlNxY3J5SXk5S3pvb0VmQzBtUnFHd20zenV6N2VwVXFZYUdJMUhsOHN2YzhpRy1MMjZ2dVcwSXNrYXIwSmgxRkNHUF9SNGt0cmVocHlydF9HYWs1akZsTWxOSWlpelNxM1c5WHhhcmZiakVoa2M0R1lnWTl6dW1xTERRbjloN1ptR09jLVZLeEY3X2VrT3ZUNi1FYzBlUUlhU0ZkeVVVeWtWU09fZGJzV3ZYUEhwaXJaejhmOWwzR00wa1h4Nmt0TWpwLTdqWXpOMHcwYXl3SXN3MENScGp1SmhWRkZOTWVJYXVRcy02MEdJdGt1R2RkTXFKbkxTQmU2MHZPc0xJcGxhRVpKeTFYUGswRUYxdEVCUjdYQjBJam9zYzhkV2tYQUdGMDBNOF9RZDNtZW1uM3pxak0yWUF3IiwiZXlKaGJHY2lPaUpTVXpJMU5pSXNJblI1Y0NJNklsUmxiR1Z5YVdzZ1RHbGpaVzV6WlNCRmRtbGtaVzVqWlNKOS5leUowZVhCbElqb2lkWE5oWjJVaUxDSjFjMlZ5U1dRaU9pSmhZV0ZoWVdGaFlTMWlZbUppTFdOalkyTXRaR1JrWkMxbFpXVmxaV1ZsWldWbFpXVWlMQ0pzYVdObGJuTmxTV1FpT2lJeE1XTm1NelUxTmkxaE5qRXhMVFF5WldNdE9URmtaaTB4Tm1Zd04yWXpNREJtWW1NaUxDSnBjMGx1ZEdWeWJtRnNWWE5oWjJVaU9uUnlkV1Y5LkxtMVY0eHFJWUlIalRHbU94ZUkyd2x2dDFrVEMyZ01McE5UQ1pvYTZIbTdxdXJwZ0M3c1BVMFgxODd3eURYNmEwX0tvNnFOUGJTWlotNjJFdGNHNEwtLUE5MTZscEdtckRIS0Y4LXotRWJjMGVDSG9NM2U4R2ItVjF3c0pucGQ1LUhFYU0yYjZhR2JJTC1HTHllLVVraUVubEZVN2ZuNFktcEFSUVNBTVpKWTRqdnlMYS11OTloRzRKOGxHUGw4NTVUMEt3ci16dkRRUEZzQnB2eVhtMFV6Xy10THRSeHB3OTU0THl4WXNhR1l2RkVEZE1NQU5hWHN0UnFFNmRlNW9EWEJ2aEdIbXluaG9UUXREMHdTdlhKSXVhcms2bk1TWm52Q0JlUEllY2Z4dVNLMmMwNFdLa1FLMkNHMGxFOEE4S3hjSDJHUE9RS0IyU2JEOGN6ci1EQSJdLCJwcm9kdWN0cyI6W10sImF1ZCI6InUqKioubioqKkB0KioqKioqLnRlc3QiLCJsaWNlbnNlSG9sZGVyIjoidSoqKi5uKioqQHQqKioqKioudGVzdCIsImludGVncml0eSI6ImJqSHgvbUZSREloK1hsdWpJbUViM01ic2hKMWlsRzRSWDJEYlM1ZFJnaW89In0.mOkV0LHgWPSGFWupGEg6e-4TmnsXcIBHPNEwmpogexUTx2ytqQImmMpAnRZYPCtMT0Llxwyaq9p6DoDtzZ0FjlB3BU92Accvxz2iK5zS7-YmgWMN_isN4Zvzkt5QTNAoPvG7bTN_UAjNp5_gL4D24YJF2yOnCySVZSa2Lpnv0E3PzowZKqmVZ1D0q7RSE80jwS0tmNTrxf6EV7_Gyhpw3XyaF-rigIrs86XJuHztvcXQQ_5vPJu8eWSAChGY45ki6wVWIfAqJE5Nq5ciaZYyiTmR_URTdYospLylZkwfJBtnubxshOclFhHMBqcHyd1acdYAnbgra5IEwIzqOwaB6Q
				[ERROR] Response received TK101 Invalid License Key
				[DEBUG] Using teleriklicensekey Key=eyJhbGciOiJSUzI1NiIsInR5cCI6IlRlbGVyaWsgTGljZW5zZSBLZXkifQ.eyJ0eXBlIjoidGVsZXJpay1saWNlbnNlIiwibGljZW5zZUlkIjoiMTFjZjM1NTYtYTYxMS00MmVjLTkxZGYtMTZmMDdmMzAwZmJjIiwidXNlcklkIjoiYWFhYWFhYWEtYmJiYi1jY2NjLWRkZGQtZWVlZWVlZWVlZWVlIiwiaWF0IjoxNzU5MTU0OTMxLCJsaWNlbnNlcyI6WyJleUpoYkdjaU9pSlNVekkxTmlJc0luUjVjQ0k2SWxSbGJHVnlhV3NnVEdsalpXNXpaU0JGZG1sa1pXNWpaU0o5LmV5SmpiMlJsSWpvaVZVbEJVMUJEVDFKRklpd2lkSGx3WlNJNkluTjFZbk5qY21sd2RHbHZiaUlzSW1WNGNHbHlZWFJwYjI0aU9qRTNOakUzTkRZNU16QXNJblZ6WlhKSlpDSTZJbUZoWVdGaFlXRmhMV0ppWW1JdFkyTmpZeTFrWkdSa0xXVmxaV1ZsWldWbFpXVmxaU0lzSW14cFkyVnVjMlZKWkNJNklqRXhZMll6TlRVMkxXRTJNVEV0TkRKbFl5MDVNV1JtTFRFMlpqQTNaak13TUdaaVl5SjkuMWtfTmhXSk9Na0s1amZ3WGh4OVZYdHVFbl9URjJsemJxbGFyWk5ZMU03eXo3X2c3blFEVlE1TzgzSmJaZ0hjRDdZQjREdDQzQndPNjVlYm03dWdaRUR2U3l1M2NnSkJtWndncUpHeXNNN3ZhYkNoVUxLX0Jqb01DVG1NY25FRzdKQ0h0N0R6U3JPb1VmckNESUhyZ1VXTWFPcWtGeFVYeWFKUUtLcTFhZDdNTVAtV05pYTdEbGVLVTRkQ2pKcU1EX21pd1pkTEVZRVphZXNBdFZsYXp5MHM1VU05YzgyM3BDOFZKU3NkTWhVcXMzU3M2aXFqWFB2RFRXejZ3aUZJdm9IVUxJLXYwRFBDN0kwUjQ3czlWQ3ZiZGl0QW9JWUNWRHJBa0dneFNwSHpmc0Zoa0J2NnZJcFVvLTQydXQyNWxKMFJEQXF4bFpWVHN4d3JMWTY2S2N3IiwiZXlKaGJHY2lPaUpTVXpJMU5pSXNJblI1Y0NJNklsUmxiR1Z5YVdzZ1RHbGpaVzV6WlNCRmRtbGtaVzVqWlNKOS5leUowZVhCbElqb2lkWE5oWjJVaUxDSjFjMlZ5U1dRaU9pSmhZV0ZoWVdGaFlTMWlZbUppTFdOalkyTXRaR1JrWkMxbFpXVmxaV1ZsWldWbFpXVWlMQ0pzYVdObGJuTmxTV1FpT2lJeE1XTm1NelUxTmkxaE5qRXhMVFF5WldNdE9URmtaaTB4Tm1Zd04yWXpNREJtWW1NaUxDSnBjMGx1ZEdWeWJtRnNWWE5oWjJVaU9uUnlkV1Y5LkxtMVY0eHFJWUlIalRHbU94ZUkyd2x2dDFrVEMyZ01McE5UQ1pvYTZIbTdxdXJwZ0M3c1BVMFgxODd3eURYNmEwX0tvNnFOUGJTWlotNjJFdGNHNEwtLUE5MTZscEdtckRIS0Y4LXotRWJjMGVDSG9NM2U4R2ItVjF3c0pucGQ1LUhFYU0yYjZhR2JJTC1HTHllLVVraUVubEZVN2ZuNFktcEFSUVNBTVpKWTRqdnlMYS11OTloRzRKOGxHUGw4NTVUMEt3ci16dkRRUEZzQnB2eVhtMFV6Xy10THRSeHB3OTU0THl4WXNhR1l2RkVEZE1NQU5hWHN0UnFFNmRlNW9EWEJ2aEdIbXluaG9UUXREMHdTdlhKSXVhcms2bk1TWm52Q0JlUEllY2Z4dVNLMmMwNFdLa1FLMkNHMGxFOEE4S3hjSDJHUE9RS0IyU2JEOGN6ci1EQSJdLCJwcm9kdWN0cyI6W10sImF1ZCI6InUqKioubioqKkB0KioqKioqLnRlc3QiLCJsaWNlbnNlSG9sZGVyIjoidSoqKi5uKioqQHQqKioqKioudGVzdCIsImludGVncml0eSI6ImJqSHgvbUZSREloK1hsdWpJbUViM01ic2hKMWlsRzRSWDJEYlM1ZFJnaW89In0.ducvbQWc9JODoG9DFVMerhvuM2EsmsZRG-A8zhNzznJbIgxMAPeev0hcBIEYcSvPgmmAmjRBR1R_luBnl5sOMmP4h4BV0Mc5PY4prrOVEEDyabaKaiMtIUTJApG4gKOkOTZPiuP6DPJVMfy31YcLv0ldKfMJ004IAH1_cOjLVPDyEXlEb6RZv02xtho0Wgo5z6NtylVXO3JDv5F1v4vGibdPf3EY3blpzIVqEvm8NtWBHv44CbDUi8-nYzBf4ZDIg3kvJdOphW9KqHq6Kg7fT8jw5bTV-Lln438y-LMJWMS-agKkEFEJufi7nJjBnCSMasqKgbUQMyG8mFG8j79pOw
				[INFO] Response received: 200 OK
			`,
			want: []string{
				"eyJhbGciOiJSUzI1NiIsInR5cCI6IlRlbGVyaWsgTGljZW5zZSBLZXkifQ.eyJ0eXBlIjoidGVsZXJpay1saWNlbnNlIiwibGljZW5zZUlkIjoiMTFjZjM1NTYtYTYxMS00MmVjLTkxZGYtMTZmMDdmMzAwZmJjIiwidXNlcklkIjoiYWFhYWFhYWEtYmJiYi1jY2NjLWRkZGQtZWVlZWVlZWVlZWVlIiwiaWF0IjoxNzU5MTU0OTMxLCJsaWNlbnNlcyI6WyJleUpoYkdjaU9pSlNVekkxTmlJc0luUjVjQ0k2SWxSbGJHVnlhV3NnVEdsalpXNXpaU0JGZG1sa1pXNWpaU0o5LmV5SmpiMlJsSWpvaVZVbEJVMUJEVDFKRklpd2lkSGx3WlNJNkluTjFZbk5qY21sd2RHbHZiaUlzSW1WNGNHbHlZWFJwYjI0aU9qRTNNamMyTVRnNU16QXNJblZ6WlhKSlpDSTZJbUZoWVdGaFlXRmhMV0ppWW1JdFkyTmpZeTFrWkdSa0xXVmxaV1ZsWldWbFpXVmxaU0lzSW14cFkyVnVjMlZKWkNJNklqRXhZMll6TlRVMkxXRTJNVEV0TkRKbFl5MDVNV1JtTFRFMlpqQTNaak13TUdaaVl5SjkudmJ0LXk1Q01iVUQ2M3hjWnlPV25wSExQUURiSFlRMlNxY3J5SXk5S3pvb0VmQzBtUnFHd20zenV6N2VwVXFZYUdJMUhsOHN2YzhpRy1MMjZ2dVcwSXNrYXIwSmgxRkNHUF9SNGt0cmVocHlydF9HYWs1akZsTWxOSWlpelNxM1c5WHhhcmZiakVoa2M0R1lnWTl6dW1xTERRbjloN1ptR09jLVZLeEY3X2VrT3ZUNi1FYzBlUUlhU0ZkeVVVeWtWU09fZGJzV3ZYUEhwaXJaejhmOWwzR00wa1h4Nmt0TWpwLTdqWXpOMHcwYXl3SXN3MENScGp1SmhWRkZOTWVJYXVRcy02MEdJdGt1R2RkTXFKbkxTQmU2MHZPc0xJcGxhRVpKeTFYUGswRUYxdEVCUjdYQjBJam9zYzhkV2tYQUdGMDBNOF9RZDNtZW1uM3pxak0yWUF3IiwiZXlKaGJHY2lPaUpTVXpJMU5pSXNJblI1Y0NJNklsUmxiR1Z5YVdzZ1RHbGpaVzV6WlNCRmRtbGtaVzVqWlNKOS5leUowZVhCbElqb2lkWE5oWjJVaUxDSjFjMlZ5U1dRaU9pSmhZV0ZoWVdGaFlTMWlZbUppTFdOalkyTXRaR1JrWkMxbFpXVmxaV1ZsWldWbFpXVWlMQ0pzYVdObGJuTmxTV1FpT2lJeE1XTm1NelUxTmkxaE5qRXhMVFF5WldNdE9URmtaaTB4Tm1Zd04yWXpNREJtWW1NaUxDSnBjMGx1ZEdWeWJtRnNWWE5oWjJVaU9uUnlkV1Y5LkxtMVY0eHFJWUlIalRHbU94ZUkyd2x2dDFrVEMyZ01McE5UQ1pvYTZIbTdxdXJwZ0M3c1BVMFgxODd3eURYNmEwX0tvNnFOUGJTWlotNjJFdGNHNEwtLUE5MTZscEdtckRIS0Y4LXotRWJjMGVDSG9NM2U4R2ItVjF3c0pucGQ1LUhFYU0yYjZhR2JJTC1HTHllLVVraUVubEZVN2ZuNFktcEFSUVNBTVpKWTRqdnlMYS11OTloRzRKOGxHUGw4NTVUMEt3ci16dkRRUEZzQnB2eVhtMFV6Xy10THRSeHB3OTU0THl4WXNhR1l2RkVEZE1NQU5hWHN0UnFFNmRlNW9EWEJ2aEdIbXluaG9UUXREMHdTdlhKSXVhcms2bk1TWm52Q0JlUEllY2Z4dVNLMmMwNFdLa1FLMkNHMGxFOEE4S3hjSDJHUE9RS0IyU2JEOGN6ci1EQSJdLCJwcm9kdWN0cyI6W10sImF1ZCI6InUqKioubioqKkB0KioqKioqLnRlc3QiLCJsaWNlbnNlSG9sZGVyIjoidSoqKi5uKioqQHQqKioqKioudGVzdCIsImludGVncml0eSI6ImJqSHgvbUZSREloK1hsdWpJbUViM01ic2hKMWlsRzRSWDJEYlM1ZFJnaW89In0.mOkV0LHgWPSGFWupGEg6e-4TmnsXcIBHPNEwmpogexUTx2ytqQImmMpAnRZYPCtMT0Llxwyaq9p6DoDtzZ0FjlB3BU92Accvxz2iK5zS7-YmgWMN_isN4Zvzkt5QTNAoPvG7bTN_UAjNp5_gL4D24YJF2yOnCySVZSa2Lpnv0E3PzowZKqmVZ1D0q7RSE80jwS0tmNTrxf6EV7_Gyhpw3XyaF-rigIrs86XJuHztvcXQQ_5vPJu8eWSAChGY45ki6wVWIfAqJE5Nq5ciaZYyiTmR_URTdYospLylZkwfJBtnubxshOclFhHMBqcHyd1acdYAnbgra5IEwIzqOwaB6Q",
				"eyJhbGciOiJSUzI1NiIsInR5cCI6IlRlbGVyaWsgTGljZW5zZSBLZXkifQ.eyJ0eXBlIjoidGVsZXJpay1saWNlbnNlIiwibGljZW5zZUlkIjoiMTFjZjM1NTYtYTYxMS00MmVjLTkxZGYtMTZmMDdmMzAwZmJjIiwidXNlcklkIjoiYWFhYWFhYWEtYmJiYi1jY2NjLWRkZGQtZWVlZWVlZWVlZWVlIiwiaWF0IjoxNzU5MTU0OTMxLCJsaWNlbnNlcyI6WyJleUpoYkdjaU9pSlNVekkxTmlJc0luUjVjQ0k2SWxSbGJHVnlhV3NnVEdsalpXNXpaU0JGZG1sa1pXNWpaU0o5LmV5SmpiMlJsSWpvaVZVbEJVMUJEVDFKRklpd2lkSGx3WlNJNkluTjFZbk5qY21sd2RHbHZiaUlzSW1WNGNHbHlZWFJwYjI0aU9qRTNOakUzTkRZNU16QXNJblZ6WlhKSlpDSTZJbUZoWVdGaFlXRmhMV0ppWW1JdFkyTmpZeTFrWkdSa0xXVmxaV1ZsWldWbFpXVmxaU0lzSW14cFkyVnVjMlZKWkNJNklqRXhZMll6TlRVMkxXRTJNVEV0TkRKbFl5MDVNV1JtTFRFMlpqQTNaak13TUdaaVl5SjkuMWtfTmhXSk9Na0s1amZ3WGh4OVZYdHVFbl9URjJsemJxbGFyWk5ZMU03eXo3X2c3blFEVlE1TzgzSmJaZ0hjRDdZQjREdDQzQndPNjVlYm03dWdaRUR2U3l1M2NnSkJtWndncUpHeXNNN3ZhYkNoVUxLX0Jqb01DVG1NY25FRzdKQ0h0N0R6U3JPb1VmckNESUhyZ1VXTWFPcWtGeFVYeWFKUUtLcTFhZDdNTVAtV05pYTdEbGVLVTRkQ2pKcU1EX21pd1pkTEVZRVphZXNBdFZsYXp5MHM1VU05YzgyM3BDOFZKU3NkTWhVcXMzU3M2aXFqWFB2RFRXejZ3aUZJdm9IVUxJLXYwRFBDN0kwUjQ3czlWQ3ZiZGl0QW9JWUNWRHJBa0dneFNwSHpmc0Zoa0J2NnZJcFVvLTQydXQyNWxKMFJEQXF4bFpWVHN4d3JMWTY2S2N3IiwiZXlKaGJHY2lPaUpTVXpJMU5pSXNJblI1Y0NJNklsUmxiR1Z5YVdzZ1RHbGpaVzV6WlNCRmRtbGtaVzVqWlNKOS5leUowZVhCbElqb2lkWE5oWjJVaUxDSjFjMlZ5U1dRaU9pSmhZV0ZoWVdGaFlTMWlZbUppTFdOalkyTXRaR1JrWkMxbFpXVmxaV1ZsWldWbFpXVWlMQ0pzYVdObGJuTmxTV1FpT2lJeE1XTm1NelUxTmkxaE5qRXhMVFF5WldNdE9URmtaaTB4Tm1Zd04yWXpNREJtWW1NaUxDSnBjMGx1ZEdWeWJtRnNWWE5oWjJVaU9uUnlkV1Y5LkxtMVY0eHFJWUlIalRHbU94ZUkyd2x2dDFrVEMyZ01McE5UQ1pvYTZIbTdxdXJwZ0M3c1BVMFgxODd3eURYNmEwX0tvNnFOUGJTWlotNjJFdGNHNEwtLUE5MTZscEdtckRIS0Y4LXotRWJjMGVDSG9NM2U4R2ItVjF3c0pucGQ1LUhFYU0yYjZhR2JJTC1HTHllLVVraUVubEZVN2ZuNFktcEFSUVNBTVpKWTRqdnlMYS11OTloRzRKOGxHUGw4NTVUMEt3ci16dkRRUEZzQnB2eVhtMFV6Xy10THRSeHB3OTU0THl4WXNhR1l2RkVEZE1NQU5hWHN0UnFFNmRlNW9EWEJ2aEdIbXluaG9UUXREMHdTdlhKSXVhcms2bk1TWm52Q0JlUEllY2Z4dVNLMmMwNFdLa1FLMkNHMGxFOEE4S3hjSDJHUE9RS0IyU2JEOGN6ci1EQSJdLCJwcm9kdWN0cyI6W10sImF1ZCI6InUqKioubioqKkB0KioqKioqLnRlc3QiLCJsaWNlbnNlSG9sZGVyIjoidSoqKi5uKioqQHQqKioqKioudGVzdCIsImludGVncml0eSI6ImJqSHgvbUZSREloK1hsdWpJbUViM01ic2hKMWlsRzRSWDJEYlM1ZFJnaW89In0.ducvbQWc9JODoG9DFVMerhvuM2EsmsZRG-A8zhNzznJbIgxMAPeev0hcBIEYcSvPgmmAmjRBR1R_luBnl5sOMmP4h4BV0Mc5PY4prrOVEEDyabaKaiMtIUTJApG4gKOkOTZPiuP6DPJVMfy31YcLv0ldKfMJ004IAH1_cOjLVPDyEXlEb6RZv02xtho0Wgo5z6NtylVXO3JDv5F1v4vGibdPf3EY3blpzIVqEvm8NtWBHv44CbDUi8-nYzBf4ZDIg3kvJdOphW9KqHq6Kg7fT8jw5bTV-Lln438y-LMJWMS-agKkEFEJufi7nJjBnCSMasqKgbUQMyG8mFG8j79pOw"},
		},
		{
			name: "invalid pattern",
			input: `
				[INFO] Sending request to the teleriklicensekey API
				[DEBUG] Using Key=alcht_a2Cy8xCLyvrAf7lZKfhQhyCr4RAID9D
				[ERROR] Response received: 401 UnAuthorized
			`,
			want: []string{},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			matchedDetectors := ahoCorasickCore.FindDetectorMatches([]byte(test.input))
			if len(matchedDetectors) == 0 {
				t.Errorf("test %q failed: expected keywords %v to be found in the input", test.name, d.Keywords())
				return
			}

			results, err := d.FromData(context.Background(), false, []byte(test.input))
			require.NoError(t, err)

			if len(results) != len(test.want) {
				t.Errorf("mismatch in result count: expected %d, got %d", len(test.want), len(results))
				return
			}

			actual := make(map[string]struct{}, len(results))
			for _, r := range results {
				if len(r.RawV2) > 0 {
					actual[string(r.RawV2)] = struct{}{}
				} else {
					actual[string(r.Raw)] = struct{}{}
				}
			}

			expected := make(map[string]struct{}, len(test.want))
			for _, v := range test.want {
				expected[v] = struct{}{}
			}

			if diff := cmp.Diff(expected, actual); diff != "" {
				t.Errorf("%s diff: (-want +got)\n%s", test.name, diff)
			}
		})
	}
}
