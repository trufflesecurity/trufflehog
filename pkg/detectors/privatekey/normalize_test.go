package privatekey

import (
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNormalize(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name: "quoted_rsa_private_key",
			input: `"-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n-----END RSA PRIVATE KEY-----"`,
			expected: "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n-----END RSA PRIVATE KEY-----\n",
		},
		{
			name: "escaped_newlines_private_key",
			input: "-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKB\\nUkJJKHhHVXvmLOHEaYKXlLFyFGZfJTZWlbNJOkYGKhLBBsGgVJGWZJGKzKwJ7c\\n-----END PRIVATE KEY-----",
			expected: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKB\nUkJJKHhHVXvmLOHEaYKXlLFyFGZfJTZWlbNJOkYGKhLBBsGgVJGWZJGKzKwJ7c\n-----END PRIVATE KEY-----\n",
		},
		{
			name: "windows_crlf_private_key",
			input: "-----BEGIN RSA PRIVATE KEY-----\r\nMIIEpAIBAAKCAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\r\n2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\r\n-----END RSA PRIVATE KEY-----",
			expected: "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n-----END RSA PRIVATE KEY-----\n",
		},
		{
			name: "tabs_and_quotes_private_key",
			input: `"-----BEGIN PRIVATE KEY-----\t\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKB\t\nUkJJKHhHVXvmLOHEaYKXlLFyFGZfJTZWlbNJOkYGKhLBBsGgVJGWZJGKzKwJ7c\t\n-----END PRIVATE KEY-----"`,
			expected: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKB\nUkJJKHhHVXvmLOHEaYKXlLFyFGZfJTZWlbNJOkYGKhLBBsGgVJGWZJGKzKwJ7c\n-----END PRIVATE KEY-----\n",
		},
		{
			name: "double_escaped_newlines",
			input: "-----BEGIN RSA PRIVATE KEY-----\\\\nMIIEpAIBAAKCAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\\\\n2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\\\\n-----END RSA PRIVATE KEY-----",
			expected: "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n-----END RSA PRIVATE KEY-----\n",
		},
		{
			name: "ec_private_key_with_mixed_formatting",
			input: `'-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIK8X2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1ZoAoGCCqGSM49\nAwEHoUQDQgAE7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n-----END EC PRIVATE KEY-----'`,
			expected: "-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIK8X2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1ZoAoGCCqGSM49\nAwEHoUQDQgAE7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n-----END EC PRIVATE KEY-----\n",
		},
		{
			name: "openssh_private_key_with_spaces",
			input: `  "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n-----END OPENSSH PRIVATE KEY-----"  `,
			expected: "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n-----END OPENSSH PRIVATE KEY-----\n",
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			assert.Equal(t, tc.expected, Normalize(tc.input))
		})
	}
}

func BenchmarkNormalize(b *testing.B) {
	testCases := []struct {
		name  string
		input string
	}{
		{
			name:  "quoted_rsa_key",
			input: `"-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n-----END RSA PRIVATE KEY-----"`,
		},
		{
			name:  "escaped_newlines_key",
			input: "-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKB\\nUkJJKHhHVXvmLOHEaYKXlLFyFGZfJTZWlbNJOkYGKhLBBsGgVJGWZJGKzKwJ7c\\n-----END PRIVATE KEY-----",
		},
		{
			name:  "windows_crlf_key",
			input: "-----BEGIN RSA PRIVATE KEY-----\r\nMIIEpAIBAAKCAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\r\n2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\r\n-----END RSA PRIVATE KEY-----",
		},
		{
			name:  "large_key_with_mixed_formatting",
			input: strings.Repeat(`"-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\n-----END RSA PRIVATE KEY-----"\n`, 10),
		},
		{
			name:  "ec_key_with_tabs_and_quotes",
			input: `'-----BEGIN EC PRIVATE KEY-----\t\nMHcCAQEEIK8X2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1ZoAoGCCqGSM49\t\nAwEHoUQDQgAE7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\t\n-----END EC PRIVATE KEY-----'`,
		},
		{
			name:  "openssh_key_double_escaped",
			input: "-----BEGIN OPENSSH PRIVATE KEY-----\\\\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAFwAAAAdzc2gtcn\\\\nNhAAAAAwEAAQAAAQEA7Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z2Z1Z\\\\n-----END OPENSSH PRIVATE KEY-----",
		},
	}

	for _, tc := range testCases {
		b.Run(tc.name, func(b *testing.B) {
			b.ReportAllocs()
			b.SetBytes(int64(len(tc.input)))
			for i := 0; i < b.N; i++ {
				_ = Normalize(tc.input)
			}
		})
	}
}
